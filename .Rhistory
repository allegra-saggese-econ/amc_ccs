joined_panel_2 <- df_did_format %>% group_by(key, m_y) %>%
mutate(patents_in_period = n()) # create col for the number of patents in each period
qadf2 <- df_did_format %>% filter(is.na(m_y))
View(qadf2)
full_df_sum <- full_df %>% group_by(applicant_name, year, quarter) %>%
mutate(sum_patents = sum(!is.na(filedate))) %>%
arrange(file_date)
colnames(full_df)
full_df_sum <- full_df %>% group_by(applicant_name, year, quarter) %>%
mutate(sum_patents = sum(!is.na(file_date))) %>%
arrange(file_date)
View(full_df_sum)
summary(full_df_sum$sum_patents)
qa_no_patents <- full_df_sum %>% filter(sum_patents==0) %>% summarise(n())
View(qa_no_patents)
rm(qa_no_patents)
517-98
167-98
69/167
post_prize_patent <- full_df_sum %>%
summarise(count = sum(as.integer(format(file_date, "%Y")) > year, na.rm = TRUE))
View(post_prize_patent)
full_df_sum <- full_df_sum %>% ungroup()
# fill in missing data
full_df_sum$file_year <- as.numeric(format(full_df_sum$file_date, "%Y"))
df_regtest <- merge(full_df_sum, post_prize_patent, by = c("applicant_name", "year", "quarter")) %>%
rename(post_app_patents = "count") %>% distinct(applicant_name, year, quarter, .keep_all = TRUE) %>%
arrange(applicant_name, year) %>% ungroup()
any_na <- any(is.na(df_regtest$sum_patents))
any_na1 <- any(is.na(df_regtest$decision_date))
# Output the result
if (any_na1) {
cat("The column contains NA values.")
} else {
cat("The column does not contain NA values.")
}
# Output the result
if (any_na) {
cat("The column contains NA values.")
} else {
cat("The column does not contain NA values.")
}
############## reg on patent output
patent_outcome <- plm(post_app_patents ~ awarded_factor + year,
data = df_regtest, index=c("applicant_name", "year", "quarter"))
patent_outcome_1 <- glm(post_app_patents ~ awarded_factor + year,
data = df_regtest)
patent_outcome
summary(patent_outcome)
############## reg on patent output
patent_outcome <- plm(post_app_patents ~ awarded_factor,
data = df_regtest, index=c("applicant_name", "year", "quarter"), model = "within")
summary(patent_outcome)
patent_outcome_1 <- glm(post_app_patents ~ awarded_factor + year,
data = df_regtest)
summary(patent_outcome_1)
patent_outcome_2 <- lm(post_app_patents ~ awarded_factor + year,
data = df_regtest)
summary(patent_outcome_2)
patent_outcome_3 <- lm(post_app_patents ~ awarded_factor + year,
data = df_regtest)
summary(patent_outcome_3)
# some results showing when you control for previous patents
patent_outcome_4 <- lm(post_app_patents ~ awarded_factor + year +
(sum_patents - post_app_patents), data = df_regtest)
summary(patent_outcome_4)
patent_outcome_4a <- plm(post_app_patents ~ awarded_factor + (sum_patents - post_app_patents),
data = df_regtest, index = c(applicant_name, year), model="within")
patent_outcome_4a <- plm(post_app_patents ~ awarded_factor + (sum_patents - post_app_patents),
data = df_regtest, index = c("applicant_name", "year"), model="within")
summary(patent_outcome_4a)
df_regtest$year_factor <- as.factor(df_regtest$year)
patent_outcome_4a <- plm(post_app_patents ~ awarded_factor + (sum_patents - post_app_patents),
data = df_regtest, index = c("applicant_name", "year_factor"), model="within")
summary(patent_outcome_4a)
df_regtest$post_app_patents
summary(df_regtest)
df_regtest$repeat_factor <- as.factor(df_regtest$previous_application_stripe)
patent_outcome_4a <- plm(post_app_patents ~ awarded_factor + (sum_patents - post_app_patents),
data = df_regtest, index = c("applicant_name", "year_factor"), model="within")
table(index(df_regtest), useNA = "ifany")
entity_counts <- table(df_regtest$applicant_name)
multiple_year_entities <- names(entity_counts[entity_counts > 1])
filtered_data <- df_regtest[df_regtest$applicant_name %in% multiple_year_entities, ]
View(filtered_data)
balanced_df <- df_regtest[!(df_regtest$applicant_name %in% multiple_year_entities), ]
patent_outcome_4a <- plm(post_app_patents ~ awarded_factor + (sum_patents - post_app_patents),
data = balanced_df, index = c("applicant_name", "year_factor"), model="within")
summary(patent_outcome_4a)
patent_outcome_4a
patent_outcome_4a <- plm(post_app_patents ~ awarded_factor + (sum_patents - post_app_patents),
data = balanced_df, index = c("applicant_name", "year_factor"), model="within")
View(balanced_df)
patent_outcome_5 <- lm(post_app_patents ~ awarded_factor + year +
(sum_patents - post_app_patents) + offer_quantity,
data = df_regtest)
summary(patent_outcome_5)
patent_outcome_5 <- lm(post_app_patents ~ awarded_factor + year_factor +
(sum_patents - post_app_patents) + offer_quantity,
data = df_regtest)
summary(patent_outcome_5)
# adding in if they were a repeated applicant
patent_outcome_5a <- lm(post_app_patents ~ awarded_factor + year_factor +
(sum_patents - post_app_patents) + repeat_factor,
data = df_regtest)
summary(patent_outcome_5a)
# not seeing anything here
patent_outcome_6 <- lm(post_app_patents ~ awarded_factor + year +
(sum_patents - post_app_patents) + offer_quantity + price,
data = df_regtest)
summary(patent_outcome_6)
patent_outcome_7 <- lm(post_app_patents ~ awarded_factor + year +
df_regtest$'lifetime mtco2e' + realised_cost_decrease,
data = df_regtest)
summary(patent_outcome_77)
summary(patent_outcome_7)
# running the opposite- direction --- no effect
award_outcome <- glm(awarded_factor ~ (sum_patents - post_app_patents),
data = df_regtest,
family = binomial(link="logit"))
summary(award_outcome)
# summary stat on some of the variables --- to functionalize
summary(df_regtest$sum_patents)
mean_val <- mean(df_regtest$sum_patents, na.rm=TRUE)
sd_val <- sd(df_regtest$sum_patents, na.rm=TRUE)
filtered_data <- df_regtest %>%
filter(sum_patents <= mean_val + 2 * sd_val)
plot(density(filtered_data$sum_patents), main = "Density Plot without Outliers", xlab = "Sum of patents by applicants")
summary(df_regtest$contractprice)
mean_val <- mean(df_regtest$contractprice, na.rm=TRUE)
sd_val <- sd(df_regtest$contractprice, na.rm=TRUE)
filtered_data <- df_regtest %>%
filter(contractprice <= mean_val + 2 * sd_val)
plot(density(filtered_data$contractprice), main = "Density Plot without Outliers", xlab = "Contract price distribution (per tonne CO2)")
summary(df_regtest$contract_quantity)
mean_val <- mean(df_regtest$contract_quantity, na.rm=TRUE)
sd_val <- sd(df_regtest$contract_quantity, na.rm=TRUE)
filtered_data <- df_regtest %>%
filter(contract_quantity <= mean_val + 2 * sd_val)
plot(density(filtered_data$contract_quantity), main = "Density Plot without Outliers", xlab = "Contract quantity distribution (total tonnes)")
mean_val <- mean(df_regtest$price, na.rm=TRUE)
sd_val <- sd(df_regtest$price, na.rm=TRUE)
filtered_data <- df_regtest %>%
filter(price <= mean_val + 2 * sd_val)
plot(density(filtered_data$price), main = "Density Plot without Outliers", xlab = "Offer Price for CO2 tonne")
# compare with out outliers to the one with -- you can see we get more information
boxplot(df_regtest$price, col = "lightgreen", main = "Boxplot of Variable")
hist(filtered_data$price, col = "skyblue", main = "Offer Price Histogram", xlab="Price per tonne(no outliers)")
#### to turn the summary density plots into a function --- in progress
list_cols <- colnames(df_regtest)
num_cols <- df_regtest %>% select_if(is.numeric)
num_cols <- colnames(num_cols)
looplist <- c("capex", "opex", "lifetime mtco2e", "gross project emissions", "offer_quantity", "realised_cost_decrease", "sum_patents", "post_app_patents")
plot_list = list()
ggplot(filtered_data, aes(x = offer_quantity, y = price, color = awarded_factor)) +
geom_point() +
labs(x = "X-axis Label", y = "Y-axis Label", color = "Awarded") +
scale_color_discrete(name = "Awarded", labels = c("Not Awarded", "Awarded"))
ggplot(filtered_data, aes(x = offer_quantity, y = price, color = awarded_factor)) +
geom_point() +
labs(x = "Offer Quantity", y = "Offer price", color = "Awarded") +
scale_color_discrete(name = "Awarded", labels = c("Not Awarded", "Awarded"))
filtered_data_sub1 <- subset(filtered_data, awarded==1)
filtered_data_sub2 <- subset(filtered_data, awarded==0)
ggplot(filtered_data, aes(x = current_cost_per_tonne, y = price, color = awarded_factor)) +
geom_point() +
labs(x = "Current cost per tonne", y = "Offer price", color = "Awarded") +
scale_color_discrete(name = "Awarded", labels = c("Not Awarded", "Awarded")) +
geom_smooth(method = "lm", se=FALSE)
# Plot 1: Contracted price vs. contracted quantity by awarded applicants (previous, novel applications)
ggplot(filtered_data, aes(x = contractprice, y = contract_quantity, color=as.factor(previous_application_stripe))) +
geom_point() +
labs(x = "Contract price ($ per tonne)", y = "Contract quantity (tonnes)", color="Previous Applicant?") +
scale_color_discrete(name = "Previous application", labels = c("No", "Yes"))
# Plot 1: Contracted price vs. contracted quantity by awarded applicants (previous, novel applications)
ggplot(filtered_data, aes(x = contract_quantity, y = contractprice, color=as.factor(previous_application_stripe))) +
geom_point() +
labs(x = "Contract quantity (tonnes)", y = "Contract price ($ per tonne)", color="Previous Applicant?") +
scale_color_discrete(name = "Previous application", labels = c("No", "Yes"))
plot(density(filtered_data$sum_patents), main = "Density Plot without Outliers", xlab = "Sum of patents by applicants")
# summary stat on some of the variables --- to functionalize
summary(df_regtest$sum_patents)
mean_val <- mean(df_regtest$sum_patents, na.rm=TRUE)
sd_val <- sd(df_regtest$sum_patents, na.rm=TRUE)
filtered_data <- df_regtest %>%
filter(sum_patents <= mean_val + 2 * sd_val)
plot(density(filtered_data$sum_patents), main = "Density Plot without Outliers", xlab = "Sum of patents by applicants")
ggplot(filtered_data, aes(x = offer_quantity, y = price, color = awarded_factor)) +
geom_point() +
labs(x = "Offer Quantity", y = "Offer price", color = "Awarded") +
scale_color_discrete(name = "Awarded", labels = c("Not Awarded", "Awarded"))
filtered_data_sub1 <- subset(filtered_data, awarded==1)
filtered_data_sub2 <- subset(filtered_data, awarded==0)
ggplot(filtered_data, aes(x = current_cost_per_tonne, y = price, color = awarded_factor)) +
geom_point() +
labs(x = "Current cost per tonne", y = "Offer price", color = "Awarded") +
scale_color_discrete(name = "Awarded", labels = c("Not Awarded", "Awarded")) +
geom_smooth(method = "lm", se=FALSE)
filtered_data <- df_regtest %>%
filter(price <= mean_val + 2 * sd_val)
plot(density(filtered_data$price), main = "Density Plot without Outliers", xlab = "Offer Price for CO2 tonne")
# compare with out outliers to the one with -- you can see we get more information
boxplot(df_regtest$price, col = "lightgreen", main = "Boxplot of Variable")
ggplot(filtered_data, aes(x = offer_quantity, y = price, color = awarded_factor)) +
geom_point() +
labs(x = "Offer Quantity", y = "Offer price", color = "Awarded") +
scale_color_discrete(name = "Awarded", labels = c("Not Awarded", "Awarded"))
filtered_data_sub1 <- subset(filtered_data, awarded==1)
filtered_data_sub2 <- subset(filtered_data, awarded==0)
ggplot(filtered_data, aes(x = current_cost_per_tonne, y = price, color = awarded_factor)) +
geom_point() +
labs(x = "Current cost per tonne", y = "Offer price", color = "Awarded") +
scale_color_discrete(name = "Awarded", labels = c("Not Awarded", "Awarded")) +
geom_smooth(method = "lm", se=FALSE)
# Plot 1: Contracted price vs. contracted quantity by awarded applicants (previous, novel applications)
ggplot(filtered_data, aes(x = contract_quantity, y = contractprice, color=as.factor(previous_application_stripe))) +
geom_point() +
labs(x = "Contract quantity (tonnes)", y = "Contract price ($ per tonne)", color="Previous Applicant?") +
scale_color_discrete(name = "Previous application", labels = c("No", "Yes"))
# Plot 2: Contracted price vs. contracted quantity by count of post-application patent
ggplot(filtered_data, aes(x = contractprice, y = contract_quantity, color=post_app_patents)) +
geom_point() +
labs(x = "Contract price ($ per tonne)", y = "Contract quantity (tonnes)", color="Patent count (after award)")
# summary stat on some of the variables --- to functionalize
summary(df_regtest$sum_patents)
mean_val <- mean(df_regtest$sum_patents, na.rm=TRUE)
sd_val <- sd(df_regtest$sum_patents, na.rm=TRUE)
filtered_data <- df_regtest %>%
filter(sum_patents <= mean_val + 2 * sd_val)
plot(density(filtered_data$sum_patents), main = "Density Plot without Outliers", xlab = "Sum of patents by applicants")
summary(df_regtest$contractprice)
mean_val <- mean(df_regtest$contractprice, na.rm=TRUE)
sd_val <- sd(df_regtest$contractprice, na.rm=TRUE)
filtered_data <- df_regtest %>%
filter(contractprice <= mean_val + 2 * sd_val)
plot(density(filtered_data$contractprice), main = "Density Plot without Outliers",
xlab = "Contract price distribution (per tonne CO2)")
summary(df_regtest$contract_quantity)
mean_val <- mean(df_regtest$contract_quantity, na.rm=TRUE)
sd_val <- sd(df_regtest$contract_quantity, na.rm=TRUE)
filtered_data <- df_regtest %>%
filter(contract_quantity <= mean_val + 2 * sd_val)
plot(density(filtered_data$contract_quantity), main = "Density Plot without Outliers",
xlab = "Contract quantity distribution (total tonnes)")
mean_val <- mean(df_regtest$price, na.rm=TRUE)
sd_val <- sd(df_regtest$price, na.rm=TRUE)
filtered_data <- df_regtest %>%
filter(price <= mean_val + 2 * sd_val)
plot(density(filtered_data$price), main = "Density Plot without Outliers", xlab = "Offer Price for CO2 tonne")
# compare with out outliers to the one with -- you can see we get more information
boxplot(df_regtest$price, col = "lightgreen", main = "Boxplot of Variable")
ggplot(filtered_data, aes(x = offer_quantity, y = price, color = awarded_factor)) +
geom_point() +
labs(x = "Offer Quantity", y = "Offer price", color = "Awarded") +
scale_color_discrete(name = "Awarded", labels = c("Not Awarded", "Awarded"))
filtered_data_sub1 <- subset(filtered_data, awarded==1)
filtered_data_sub2 <- subset(filtered_data, awarded==0)
ggplot(filtered_data, aes(x = current_cost_per_tonne, y = price, color = awarded_factor)) +
geom_point() +
labs(x = "Current cost per tonne", y = "Offer price", color = "Awarded") +
scale_color_discrete(name = "Awarded", labels = c("Not Awarded", "Awarded")) +
geom_smooth(method = "lm", se=FALSE)
# Plot 1: Contracted price vs. contracted quantity by awarded applicants (previous, novel applications)
ggplot(filtered_data, aes(x = contract_quantity, y = contractprice, color=as.factor(previous_application_stripe))) +
geom_point() +
labs(x = "Contract quantity (tonnes)", y = "Contract price ($ per tonne)", color="Previous Applicant?") +
scale_color_discrete(name = "Previous application", labels = c("No", "Yes"))
# Plot 2: Contracted price vs. contracted quantity by count of post-application patent
ggplot(filtered_data, aes(x = contractprice, y = contract_quantity, color=post_app_patents)) +
geom_point() +
labs(x = "Contract price ($ per tonne)", y = "Contract quantity (tonnes)", color="Patent count (after award)")
# Plot 2: Contracted price vs. contracted quantity by count of post-application patent
ggplot(filtered_data, aes(x = contract_quantity, y = contractprice, color=post_app_patents)) +
geom_point() +
labs(x = "Contract quantity (tonnes)", y = "Contract price ($ per tonne)", color="Patent count (after award)")
# Plot 3:
colstosum <- c("year", "quarter", "awarded", "lifetime mtco2e", "contractprice", "current_cost_per_tonne", "gross project emissions", "offer_quantity",
"contract_quantity", "realised_cost_decrease", "price_contract_diff", "quantity_contract_diff", "sum_patents",
"post_app_patents")
new_names <- c("year", "quarter", "awarded", "lifetimeabate", "contractprice", "estcost", "totem", "offerq",
"contractq", "costdecrease", "pdiff", "qdiff", "totpatents",
"postpatents")
tot_award_sum_2 <- filtered_data_sub1 %>% select(all_of(colstosum)) %>%
rename_with(~ new_names, everything()) %>%
group_by(year, quarter) %>%
summarise(across(everything(), list(mean = mean, median = median, sd = sd), na.rm=TRUE))
tot_award_sum
awarded_sum_long <- tot_award_sum_2 %>%
pivot_longer(-c(year, quarter), names_to = c(".value", "stat"), names_sep = "_")
# need to return to this plot
ggplot(subset(awarded_sum_long[complete.cases(awarded_sum_long), ], stat == "mean"), aes(x = factor(quarter), y = contractprice, fill = factor(year))) +
geom_boxplot() +
facet_wrap(~ stat, scales = "free", ncol = 1) + # Adjust facet_wrap parameters as needed
labs(title = "Summary Statistics by Year",
x = "Year",
y = "Value",
fill = "Statistic")
View(df_did_format)
# make date columns
current_date <- Sys.Date()
dates_col <- seq(as.Date("2020-01-01"), current_date, by = "month")
dates_col_2 <- as.yearmon(dates_col)
full_df_sum$treat_date <- as.Date(full_df_sum$effective_date, format = "%d/%m/%Y")
# make decision date == effective date for each group
df_did_format <- full_df_sum %>% group_by(year, quarter) %>%
mutate(treat_date = max(treat_date, na.rm=TRUE)) %>%
ungroup() %>%
select(-c("assignee", "classification_6", "classification_5"))
df_did_format$m_y <- paste(year(df_did_format$file_date), month(df_did_format$file_date), sep = "-")
df_did_format$m_y <- as.yearmon(df_did_format$m_y)
df_did_format$key = paste0(df_did_format$applicant_name, df_did_format$year, df_did_format$quarter)
# take unique firms and create firms for each month in the project period
firmsonly <- full_df_sum %>%
mutate(key = paste0(applicant_name, year, quarter)) %>%
distinct(key, .keep_all = TRUE)
firm_month_interval <- expand.grid(key = firmsonly$key, m_y = dates_col_2)
# before cleaning - need to QA the treat_date column
summary(df_did_format$treat_date)
qadf <- df_did_format %>% filter(is.na(treat_date))
qadf2 <- df_did_format %>% filter(is.na(m_y))# issue is I kept the patent data of non-patented firms
joined_panel_2 <- df_did_format %>% group_by(key, m_y) %>%
mutate(patents_in_period = n()) # create col for the number of patents in each period
qadf <- df_did_format %>% filter(is.na(treat_date))
qadf <- df_did_format %>% filter(is.na(m_y))
joined_panel_2 <- df_did_format %>% group_by(key, m_y) %>%
mutate(patents_in_period = sum(!is.na(file_date)))
qadf <- df_did_format %>% filter(is.na(m_y))
View(joined_panel_2)
summary(joined_panel_2)
joined_panel_2 <- df_did_format %>% group_by(key, m_y) %>%
mutate(patents_in_period = sum(!is.na(file_date))) %>% # create col for the number of patents in each period
ungroup()
# drop the duplicate patents (i.e. filed in two locations)
joined_panel_3 <- joined_panel_2 %>% filter(!is.na(patents_in_period)) %>%
group_by(key, m_y, patent_name) %>%
filter(row_number() == 1) %>%
ungroup() %>%
group_by(key, m_y) %>%
mutate(unique_patents_in_period = n())
View(joined_panel_3)
joined_panel_3 <- joined_panel_2 %>% filter(!is.na(patents_in_period)) %>%
group_by(key, m_y, patent_name) %>%
filter(row_number() == 1) %>%
ungroup() %>%
group_by(key, m_y) %>%
mutate(unique_patents_in_period = sum(!is.na(file_date)))
joined_panel_2 <- df_did_format %>% group_by(key, m_y) %>%
mutate(patents_in_period = sum(!is.na(file_date))) %>% # create col for the number of patents in each period
ungroup() %>% filter(!sum_patents ==0)
# drop the duplicate patents (i.e. filed in two locations)
joined_panel_3 <- joined_panel_2 %>% filter(!is.na(patents_in_period)) %>%
group_by(key, m_y, patent_name) %>%
filter(row_number() == 1) %>%
ungroup() %>%
group_by(key, m_y) %>%
mutate(unique_patents_in_period = sum(!is.na(file_date)))
jp2 <- joined_panel_2 %>% select(c(patents_in_period, key, m_y, file_date,
file_year, patent_name, application_number,
inventor_1, quarter, year))
jp3 <- joined_panel_3 %>% select(c(key, m_y, patent_name, unique_patents_in_period))
# summarise patent level data (count of total, count of unique)
jp_to_add <- merge(jp2, jp3, by=c("key", "m_y", "patent_name"))
jp_to_add_unique <- jp_to_add %>% group_by(key, m_y) %>%
slice(1)
#remerge patent data back
did_merged <- left_join(firm_month_interval, jp_to_add_unique, by = c("m_y", "key")) %>%
arrange("m_y", "key")
View(did_merged)
summary(did_merged)
8160-7835
summary(joined_panel_2)
jp_to_add <- merge(jp2, jp3, by=c("key", "m_y", "patent_name")) %>% filter(file_date > as.Date("2020-05-01"))
jp_to_add_unique <- jp_to_add %>% group_by(key, m_y) %>%
slice(1)
#remerge patent data back
did_merged <- left_join(firm_month_interval, jp_to_add_unique, by = c("m_y", "key")) %>%
arrange("m_y", "key") # missing four observations
summary(did_merged)
8160-7846
View(df_did_format)
joined_panel_2 <- df_did_format %>% group_by(key, m_y) %>%
mutate(patents_in_period = sum(!is.na(file_date))) %>% # create col for the number of patents in each period
ungroup() %>% filter(!sum_patents ==0) # drop where there are no patents
qadf <- df_did_format %>% filter(is.na(m_y))
View(qadf2)
qadf <- joined_panel_2 %>% filter(is.na(m_y))
qadf3 <- joined_panel_2 %>% filter(is.na(m_y))
rm(qadf3)
rm(qadf)
rm(qadf2)
summary(joined_panel_2)
joined_panel_3 <- joined_panel_2 %>% filter(!is.na(patents_in_period))
joined_panel_3 <- joined_panel_2 %>% filter(!is.na(patents_in_period)) %>%
group_by(key, m_y, patent_name) %>%
filter(row_number() == 1)
# drop the duplicate patents (i.e. filed in two locations)
joined_panel_3 <- joined_panel_2 %>% filter(!is.na(patents_in_period)) %>%
group_by(key, m_y, patent_name) %>%
filter(row_number() == 1) %>%
ungroup() %>%
group_by(key, m_y) %>%
mutate(unique_patents_in_period = n())
jp2 <- joined_panel_2 %>% select(c(patents_in_period, key, m_y, file_date,
file_year, patent_name, application_number,
inventor_1, quarter, year, treat_date))
jp3 <- joined_panel_3 %>% select(c(key, m_y, patent_name, unique_patents_in_period))
jp_to_add <- merge(jp2, jp3, by=c("key", "m_y", "patent_name")) %>% filter(file_date > as.Date("2020-05-01"))
jp_to_add_unique <- jp_to_add %>% group_by(key, m_y) %>%
slice(1)
# summarise patent level data (count of total, count of unique)
jp_to_add <- merge(jp2, jp3, by=c("key", "m_y", "patent_name")) %>% filter(file_date > as.Date("2020-05-01"))
jp_to_add_unique <- jp_to_add %>% group_by(key, m_y) %>%
slice(1)
View(jp_to_add)
#remerge patent data back
did_merged <- left_join(firm_month_interval, jp_to_add_unique, by = c("m_y", "key")) %>%
arrange("m_y", "key") # missing four observations
did_merged
summary(did_merged)
8016-7846
# take all the pre 2020 and summarise them as pre 2020 and have it as one period -- attach afterwards?
pre_period_patents <- merge(jp2, jp3, by=c("key", "m_y", "patent_name")) %>% filter(file_date =< as.Date("2020-05-01"))
pre_period_patents <- merge(jp2, jp3, by=c("key", "m_y", "patent_name")) %>% filter(file_date <= as.Date("2020-05-01"))
View(pre_period_patents)
pre_period_unique <- pre_period_patents %>% group_by(key, m_y) %>%
slice(1)
View(pre_period_unique)
pre_period_unique <- pre_period_patents %>% group_by(key, m_y) %>%
slice(1) %>%
ungroup %>%
group_by(key) %>%
mutate(pre_period_patents_sum = n()) # new column for
summary(pre_period_unique)
View(did_merged)
colnames(did_merge)
colnames(did_merged)
colnames(df_regtest)
colnames(did_merge)
colnames(did_merged)
df_regtest$key = paste0(df_regtest$applicant_name, df_regtest$year, df_regtest$quarter)
clean_firm_level <- df_regtest %>%
select(-c(applicant_name, effective_date, decision_date, patent_name, patent_region,
patent_no, patent_no_list, application_number, file_date, assignee, abandoned, citations,
classification_1, classification_2, classification_3, classification_4, classification_5,
classification_6, classification_7, classification_8, inventor_1, post_app_patents))
clean_firm_level
# merge firm level data back in
full_did_df <- did_merged %>% select(-c(patent_name, application_number, inventor_1)) %>%
left_join(did_merge, clean_firm_level, by="key")
# merge firm level data back in
full_did_df <- did_merged %>% select(-c(patent_name, application_number, inventor_1)) %>%
left_join(clean_firm_level, by="key")
View(full_did_df)
clean_firm_level <- df_regtest %>%
select(-c(applicant_name, effective_date, decision_date, patent_name, patent_region,
patent_no, patent_no_list, application_number, file_date, assignee, abandoned, citations,
classification_1, classification_2, classification_3, classification_4, classification_5,
classification_6, classification_7, classification_8, inventor_1, post_app_patents, file_year,
quarter, year))
# merge firm level data back in
full_did_df <- did_merged %>% select(-c(patent_name, application_number, inventor_1)) %>%
left_join(clean_firm_level, by="key")
View(full_did_df)
View(full_df_sum)
write.csv(full_df_sum, "patent_level_df.csv")
write.csv(full_did_df, "did_df.csv")
View(full_did_df)
qadf3 <- joined_panel_2 %>% filter(is.na(m_y))
joined_panel_2 <- df_did_format %>% group_by(key, m_y) %>%
mutate(patents_in_period = sum(!is.na(file_date))) %>% # create col for the number of patents in each period
ungroup() %>% filter(!sum_patents ==0) # drop where there are no patents
qadf3 <- joined_panel_2 %>% filter(is.na(m_y))
rm(qadf3)
View(jp_to_add_unique)
qa_count <- jp_to_add_unique %>% ungroup() %>% group_by(key) %>%
slice(1)
View(qa_count)
View(df_regtest)
df_regtest %>% filter(sum_patents==0)
wopatents <- df_regtest %>% filter(sum_patents==0)
98+54
98/167
View(sum_awarded)
View(tot_award_sum_2)
write.csv(tot_award_sum_2, "sum_awarded.csv")
View(tot_losses_sum)
tot_losses_sum <- stripedf %>% filter(stripedf$awarded==0) %>% group_by(year) %>%
summarise(across(price:offer_quantity, .f = list(sum = sum, mean = mean, max = max, sd = sd), na.rm = TRUE)) %>%
mutate(awarded <- "0")
View(tot_losses_sum)
View(sum_per_yr)
sum_per_yr <- stripedf %>% group_by(year, quarter) %>%
summarise(total_count=n(),.groups='drop') %>%
as.data.frame()
View(sum_per_yr)
View(sum_award_group)
4/24
10/26
sum_award_group <- stripedf %>% filter(stripedf$awarded>0) %>% group_by(year, quarter) %>%
summarise(total_count=n(),.groups='drop') %>%
as.data.frame()
View(sum_award_group)
6/26
4/11
7/26
9/38
16/41
View(sum_2)
sum_2 <- stripedf %>% group_by(year, quarter) %>%
summarise(across(price:offer_quantity, .f = list(sum = sum, mean = mean, max = max, sd = sd), na.rm = TRUE))
sum_2
summary(sum_2)
