m21 <- read_csv("Microsoft_2021_CDR.csv",
col_types = cols(`Newly contracted volume (mtCO2)` = col_number(),
`Contracted durability` = col_number()))
m22 <- read_csv("Microsoft_2022_CDR.csv",
col_types = cols(`Newly contracted volume (mtCO2)` = col_number(),
`Contracted durability` = col_number()))
m23 <- read_csv("Microsoft_2023_CDR.csv",
col_types = cols(`Newly contracted volume (mtCO2)` = col_number(),
`Contracted durability` = col_number()))
# drop empty row in m21
m21[!m21(data == "", 1, all),]
# drop empty row in m21
m21[!apply(m21 == "", 1, all),]
# drop empty row in m21
m21[!apply(is.na(m21)),]
m21[!apply(is.na(m21)),]
# drop empty row in m21
m21 <- m21[!apply(is.na(m21)),]
# drop empty row in m21
m21 %>% filter_all(any_vars(!is.na(.)))
# drop empty row in m21
m21 <- m21 %>% filter_all(any_vars(!is.na(.)))
library(readr)
Carbonplan_projects_20_21 <- read_csv("C:/Users/SAGGESE/Documents/GitHub/amc_ccs/data/Carbonplan_projects_20_21.csv")
View(Carbonplan_projects_20_21)
# upload the project CSV for comparison of the microsoft projects
carbonplan <- read_csv("C:/Users/SAGGESE/Documents/GitHub/amc_ccs/data/Carbonplan_projects_20_21.csv")
View(carbonplan)
mcarbonplan <- subset(carbonplan, source=="Microsoft 2021 CDR RFP")
View(mcarbonplan)
colnames(mcarbonplan)
# bind m21-23
cbind(m21,m22,m23)
# bind m21-23
rbind(m21,m22,m23)
colnames(m21)
colnames(m22)
colnames(m23)
m21 <- read_csv("Microsoft_2021_CDR.csv",
col_types = cols(`Newly contracted volume (mtCO2)` = col_number(),
`Contracted durability` = col_number()))
m21 <- m21 %>% filter_all(any_vars(!is.na(.))) %>%
rename("Contracted durability (years)" = "Contracted durability")
View(m21)
# bind m21-23
rbind(m21,m22,m23)
# bind m21-23
full_df <- rbind(m21,m22,m23)
View(full_df)
15+20+18
View(m21)
View(m22)
# bind m21-23
full_df <- rbind(m21,m22,m23) %>% filter_all(any_vars(!is.na(.)))
colnames(mcarbonplan)
# manual check of project by project in winning purchases
nat_con <- subset(mcarbonplan, applicant=="Nature Conservancy")
# manual check of project by project in winning purchases
nat_con <- subset(mcarbonplan, applicant=="The Nature Conservancy")
View(nat_con)
washington_component <- "MSFT150"
202369-2100000
2100000-202369
2100000-202369
clinch_valley_component <- c("MSFT101", "MSFT090", "MSFT086", "MSFT085")
+
View(m21)
View(m22)
View(m23)
View(full_df)
View(mcarbonplan)
library(pdftools)
library(tabulizer)
library(tabulizerjars)
library(tidyr)
library(lubridate)
library(kableExtra)
library(dplyr)
library(tidyverse)
# A: PURPOSE: Extract tables from Microsoft Annual reports on purchase agreements
# Set working directory
setwd("~/")
setwd("C:\\Users\\SAGGESE\\Documents\\GitHub\\amc_ccs\\data\\microsoft_2022_23")
mfiles <- list.files(pattern = "pdf$" )# create a vector of PDF file names
cdr_23 <- pdftools::pdf_text(pdf = mfiles[3])
write(cdr_23)
tablekey <- "Supplier"
table_unformat <- grep(tablekey, cdr_23, value=TRUE)
table_split <- unlist(strsplit(table_unformat, "\n\n\n"))
# drop the headers/footers from the string of characters in the PDF
dftest <- data.frame(table_split) %>%
filter(!row_number() %in% c(3)) %>%
filter(!row_number() %in% c(9)) %>%
filter(!row_number() %in% c(6)) %>%
filter(!row_number() %in% c(3))
dfmod <- dftest %>%
mutate(table_split = gsub("\\s{2,}", " ", table_split))
View(dfmod)
# A: PURPOSE: Extract relevant text from PDFs of project applications for Stripe / Frontier
setwd("C:\\Users\\SAGGESE\\Documents\\GitHub\\amc_ccs\\data\\applications_2022_23\\2022_fall")
getwd()
# A: PURPOSE: Extract relevant text from PDFs of project applications for Stripe / Frontier
setwd("C:\\Users\\SAGGESE\\Documents\\GitHub\\amc_ccs\\data\\stripe_data\\2020_total")
f20 <- list.files(pattern = "pdf$")
setwd("C:\\Users\\SAGGESE\\Documents\\GitHub\\amc_ccs\\data\\stripe_data\\2021_fall")
f21_1 <- list.files(pattern = "pdf$")
setwd("C:\\Users\\SAGGESE\\Documents\\GitHub\\amc_ccs\\data\\stripe_data\\2021_spring")
f21_2 <- list.files(pattern = "pdf$")
setwd("C:\\Users\\SAGGESE\\Documents\\GitHub\\amc_ccs\\data\\stripe_data\\2022_fall")
f22_2 <- list.files(pattern = "pdf$") # create a vector of PDF file names - 2022 fall only
# repeat for spring22/summer23
setwd("C:\\Users\\SAGGESE\\Documents\\GitHub\\amc_ccs\\data\\stripe_data\\2022_spring")
f22_1 <- list.files(pattern = "pdf$")
setwd("C:\\Users\\SAGGESE\\Documents\\GitHub\\amc_ccs\\data\\stripe_data\\2023_summer")
f23 <- list.files(pattern = "pdf$")
## Case example - use one PDF to see what relevant information can be extracted (and how)
bob<-pdftools::pdf_text(pdf = f23[1])
write(bob)
keyword <- "Year"
# identify first table write table 2023-2028 (beginning with Year)
bob[5]
# write table for 2029, 2030
p2 <- bob[6]
# get first table -- sequestration potential per year
txt_key <- grep(keyword, bob, value=TRUE)
lines <- unlist(strsplit(txt_key, "\n"))
df <- data.frame(Text=lines) %>%
filter(trimws(Text) != "") %>%
slice(24:n()) %>%
separate(Text, into = c("Year", "Estimated Gross Capacity (tonnes)"), sep = "              ", remove = FALSE) %>%
subset(select = -Text)
df_1 <- df[-c(1, nrow(df)), ]
install.packages("tcltk2")
PDE_install_Xpdftools4.02()    # Download and install the Xpdf command line tools
install.packages("PDE", dependencies = TRUE)
PDE_install_Xpdftools4.02()
install.packages("Xpdf")
PDE_install_Xpdftools4.02()
install.packages("PDE", dependencies = TRUE)
PDE_check_Xpdf_install()
PDE_analyzer()
library(tcltk2)
library(PDE)
PDE_install_Xpdftools4.02()
PDE_check_Xpdf_install()
install.packages(Xpdf)
PDE_install_Xpdftools4.02()
1
PDE_check_Xpdf_install()
PDE_analyzer()
PDE_analyzer_i()
# extract PDF information
PDE_analyzer_i()
# extract PDF information
PDE_analyzer_i()
# extract PDF information
PDE_analyzer_i()
PDE_reader_i()
# extract PDF information
PDE_analyzer_i()
#
# extract PDF information
PDE_analyzer_i()
# extract PDF information
PDE_analyzer_i()
library(readr)
library(readxl)
manual_aggregated_firmlist <- read_excel("C:/Users/SAGGESE/Documents/GitHub/amc_ccs/data/stripe_data/cleaned_outputs/manual-aggregated-firmlist.xlsx")
View(manual_aggregated_firmlist)
stripedf <- read_excel("C:/Users/SAGGESE/Documents/GitHub/amc_ccs/data/stripe_data/cleaned_outputs/manual-aggregated-firmlist.xlsx")
colnames
colnames(stripedf)
no_control <- lm(formula = awarded ~ price, data = stripedf)
View(no_control)
no_control
View(no_control)
summary(no_control)
class(stripedf$price)
library(readxl)
manual_aggregated_firmlist <- read_excel("C:/Users/SAGGESE/Documents/GitHub/amc_ccs/data/stripe_data/cleaned_outputs/manual-aggregated-firmlist.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric"))
View(manual_aggregated_firmlist)
stripedf <- read_excel("C:/Users/SAGGESE/Documents/GitHub/amc_ccs/data/stripe_data/cleaned_outputs/manual-aggregated-firmlist.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric"))
no_control <- lm(formula = awarded ~ price, data = stripedf)
summarise(no_control)
Summary
summary(no_control)
stripedf$awarded <- as.factor(stripedf$awarded)
stripedf[,'awarded'] <- as.factor(stripedf[,'awarded'])
class(stripedf$awarded)
no_control <- glm(formula = awarded ~ price, data = stripedf, family = binomial(link="logit"))
summary(no_control)
control <- glm(formula = awarded ~ (cost-price) + year, data = stripedf, family = binomial(link="logit"))
control <- glm(formula = awarded ~ (current_cost_per_tonne-price) + year, data = stripedf, family = binomial(link="logit"))
diff_realised_price <- glm(formula = awarded ~ (current_cost_per_tonne-price) + year, data = stripedf, family = binomial(link="logit"))
summary(diff_realised_price)
stripedf$realised_cost_decrease = stripedf$current_cost_per_tonne-stripedf$price
stripedf$realised_cost_decrease = (stripedf$current_cost_per_tonne-stripedf$price)
stripedf$realised_cost_decrease  <-  (stripedf$current_cost_per_tonne-stripedf$price)
stripedf$realised_cost_decrease  <- (stripedf$current_cost_per_tonne-stripedf$price)
stripedf$realised_cost_decrease <- (stripedf$current_cost_per_tonne-stripedf$price)
options(rstudio.help.showDataPreview = FALSE)
stripedf$realised_cost_decrease <- (stripedf$current_cost_per_tonne-stripedf$price)
View(no_control)
View(stripedf)
diff_realised_price <- glm(formula = awarded ~ (realised_cost_decrease) + year, data = stripedf, family = binomial(link="logit"))
summary(diff_realised_price)
diff_2 <- glm(formula = awarded ~ (realised_cost_decrease) + year + offer_quantity, data = stripedf, family = binomial(link="logit"))
summary(diff_2)
long_reg <- glm(formula = awarded ~ price + quantity_offered + price*quantity_offered + year, data = stripedf, family = binomial(link="logit"))
long_reg <- glm(formula = awarded ~ price + offer_quantity + price*offer_quantity + year, data = stripedf, family = binomial(link="logit"))
summary(long_reg)
library(readr)
library(readxl)
library(plm)
library(tidyr)
library(tidyverse)
library(dplyr)
plm_test <- plm(awarded ~ price, data = stripedf, index=c("year"), model="within")
library(survival)
cond_logit <- clogit(awarded ~ price + price*offer_quantity + offer_quantity, data = stripedf, weights = "year")
cond_logit <- clogit(awarded ~ price + price*offer_quantity + offer_quantity, data = stripedf, subset = "year", method =)
cond_logit <- clogit(awarded ~ price + price*offer_quantity + offer_quantity, data = stripedf)
cond_logit <- clogit(awarded ~ price, data = stripedf)
# summary statistics
sum_1 <- stripedf %>% group_by(year) %>%
summarise(total_count=n(),.groups='drop') %>%
as.data.frame()
View(sum_1)
sum_2 <- stripedf %>% group_by(year) %>%
summarise(total_count=sum(offer_quantity),.groups='drop') %>%
as.data.frame()
View(sum_2)
sum_2 <- stripedf %>% group_by(year) %>%
summarise(sum(offer_quantity),.groups='drop') %>%
as.data.frame()
View(sum_2)
# script to clean and merge the microsoft data into one dataset
# data was scraped from PDF, using Excel - PDF extraction software (no coding)
# data includes only projects selected (not the applicant pool)
library(tidyr)
library(dplyr)
library(ggplot2)
library(readr)
# read in the three datasets
m21 <- read_csv("Microsoft_2021_CDR.csv",
col_types = cols(`Newly contracted volume (mtCO2)` = col_number(),
`Contracted durability` = col_number()))
# summary statistics on STRIPE data
library(readr)
library(readxl)
library(plm)
library(tidyr)
library(tidyverse)
library(dplyr)
library(survival)
stripedf <- read_excel("C:/Users/SAGGESE/Documents/GitHub/amc_ccs/data/stripe_data/cleaned_outputs/manual-aggregated-firmlist.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric"))
#change awarded to factor var for regression
stripedf[,'awarded'] <- as.factor(stripedf[,'awarded'])
# test logit regressions
no_control <- glm(formula = awarded ~ price, data = stripedf, family = binomial(link="logit"))
sum_2 <- stripedf %>% group_by(year) %>%
summarise(sum(offer_quantity)) %>%
as.data.frame()
View(sum_2)
class(stripedf$offer_quantity)
class(stripedf$year)
sum_2 <- stripedf %>% group_by(year) %>%
summarise(mean(offer_quantity)) %>%
as.data.frame()
View(sum_2)
sum_2 <- stripedf %>% group_by(year) %>%
summarise(mean(offer_quantity), na.rm=TRUE) %>%
as.data.frame()
View(sum_2)
sum_2 <- stripedf %>% group_by(year) %>%
summarise(mean(offer_quantity), na.rm=FALSE) %>%
as.data.frame()
View(sum_2)
sum_2 <- stripedf %>% group_by(year) %>%
summarise(mean(offer_quantity))
View(sum_2)
sum_2 <- stripedf %>% group_by(year) %>%
summarise(across(everything(), .f = list(mean = mean, max = max, sd = sd), na.rm = TRUE))
sum_2 <- stripedf %>% group_by(year) %>%
summarise(across(price:offer_quantity), .f = list(mean = mean, max = max, sd = sd), na.rm = TRUE))
sum_2 <- stripedf %>% group_by(year) %>%
summarise(across(price:offer_quantity, .f = list(mean = mean, max = max, sd = sd), na.rm = TRUE))
View(sum_2)
sum_awarded <- stripedf %>% group_by(year, awarded) %>%
summarise(across(price:offer_quantity, .f = list(mean = mean, max = max, sd = sd), na.rm = TRUE))
View(sum_awarded)
sum_awarded <- stripedf %>% group_by(awarded) %>%
summarise(across(price:offer_quantity, .f = list(mean = mean, max = max, sd = sd), na.rm = TRUE))
View(sum_awarded)
#make awarded numeric again
stripedf[,'awarded'] <- as.numeric(stripedf[,'awarded'])
sum_awarded <- stripedf %>% group_by(awarded) %>%
summarise(across(price:offer_quantity, .f = list(mean = mean, max = max, sd = sd), na.rm = TRUE))
View(sum_awarded)
sum_2 <- stripedf %>% group_by(year) %>%
summarise(across(price:offer_quantity, .f = list(sum = sum, mean = mean, max = max, sd = sd), na.rm = TRUE))
#make awarded numeric again
stripedf[,'awarded'] <- as.numeric(stripedf[,'awarded'])
sum_1 <- stripedf %>% group_by(year) %>%
summarise(total_count=n(),.groups='drop') %>%
as.data.frame()
View(sum_1)
sum_awardonly <- stripedf %>% select(award==1) %>% group_by(year) %>%
summarise(total_count=n(),.groups='drop') %>%
as.data.frame()
sum_awardonly <- stripedf %>% select(awarded==1) %>% group_by(year) %>%
summarise(total_count=n(),.groups='drop') %>%
as.data.frame()
colnames(stripedf)
sum_awardonly <- stripedf %>% select(awarded==1)
sum_awardonly <- stripedf %>% select(stripedf$awarded==1)
library(readr)
library(readxl)
library(plm)
library(tidyr)
library(tidyverse)
library(dplyr)
library(survival)
stripedf <- read_excel("C:/Users/SAGGESE/Documents/GitHub/amc_ccs/data/stripe_data/cleaned_outputs/manual-aggregated-firmlist.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric"))
#change awarded to factor var for regression
stripedf[,'awarded'] <- as.factor(stripedf[,'awarded'])
# test logit regressions
no_control <- glm(formula = awarded ~ price, data = stripedf, family = binomial(link="logit"))
stripedf <- read_excel("C:/Users/SAGGESE/Documents/GitHub/amc_ccs/data/stripe_data/cleaned_outputs/manual-aggregated-firmlist.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric"))
#ch
# summary statistics
sum_1 <- stripedf %>% group_by(year) %>%
summarise(total_count=n(),.groups='drop') %>%
as.data.frame()
sum_awardonly <- stripedf %>% select(stripedf$awarded==1)
stripedf <- read_excel("C:/Users/SAGGESE/Documents/GitHub/amc_ccs/data/stripe_data/cleaned_outputs/manual-aggregated-firmlist.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric"))
class(stripedf$awarded)
sum_1 <- stripedf %>% group_by(year) %>%
summarise(total_count=n(),.groups='drop') %>%
as.data.frame()
sum_awardonly <- stripedf %>% select(stripedf$awarded==1)
stripedf$awarded <- as.numeric(stripedf$awarded)
sum_awardonly <- stripedf %>% select(stripedf$awarded==1)
rlang::last_trace()
stripedf$awardednum <- as.numeric(stripedf$awarded)
sum_awardonly <- stripedf %>% select(stripedf$awardednum==1)
sum_awardonly <- stripedf %>% select(stripedf$awardednum=1)
sum_awardonly <- stripedf %>% select(stripedf$awarded=1)
sum_awardonly <- stripedf %>% select(stripedf$awarded>0)
class(stripedf$awardednum)
sum_awardonly <- stripedf %>% filter(stripedf$awarded>0)
View(sum_awarded)
View(sum_awardonly)
sum_award_group <- stripedf %>% filter(stripedf$awarded>0) %>% group_by(year) %>%
summarise(total_count=n(),.groups='drop') %>%
as.data.frame()
View(sum_award_group)
tot_award_sum <- stripedf %>% filter(stripedf$awarded>0) %>% group_by(year) %>%
summarise(across(price:offer_quantity, .f = list(sum = sum, mean = mean, max = max, sd = sd), na.rm = TRUE))
View(tot_award_sum)
library(ggplot)
library(ggplot2)
tot_award_sum <- stripedf %>% filter(stripedf$awarded>0) %>% group_by(year) %>%
summarise(across(price:offer_quantity, .f = list(sum = sum, mean = mean, max = max, sd = sd), na.rm = TRUE)) %>%
mutate(awarded <- "1")
View(tot_award_sum)
tot_losses_sum <- stripedf %>% filter(stripedf$awarded=0) %>% group_by(year) %>%
tot_losses_sum <- stripedf %>% filter(stripedf$awarded==0) %>% group_by(year) %>%
summarise(across(price:offer_quantity, .f = list(sum = sum, mean = mean, max = max, sd = sd), na.rm = TRUE)) %>%
mutate(awarded <- "0")
View(tot_losses_sum)
#combine tot_award_sum
rbind(tot_award_sum, tot_losses_sum)
#combine tot_award_sum
summary_join <- left_join(tot_award_sum, tot_losses_sum)
View(summary_join)
#combine tot_award_sum
summary_join <- full_join(tot_award_sum, tot_losses_sum)
View(summary_join)
library(rstatix)
library(ggpubr)
install.packages("ggpubr")
library(readr)
library(readxl)
library(plm)
library(tidyr)
library(tidyverse)
library(dplyr)
library(survival)
library(ggplot2)
library(ggpubr)
stripedf <- read_excel("C:/Users/SAGGESE/Documents/GitHub/amc_ccs/data/stripe_data/cleaned_outputs/manual-aggregated-firmlist.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric"))
#change awarded to factor var for regression
stripedf[,'awarded'] <- as.factor(stripedf[,'awarded'])
# test logit regressions
no_control <- glm(formula = awarded ~ price, data = stripedf, family = binomial(link="logit"))
# ggplot
ggsummarystats(stripedf, x="price", y = "offer_quantity", color="awarded")
ggplot(data=summary_join, aes(x=price_mean, y=year))
ggplot(data=summary_join, aes(x=price_mean, y=year))+ geom_point()
ggplot(data=stripedf, aes(x=price, y=year))+ geom_point()
ggplot(data=stripedf, aes(x=year, y=price))+ geom_point()
plotdata <- stripedf %>% filter(price>10000000)
plotdata <- stripedf %>% filter(price<1000000)
ggplot(data=plotdata, aes(x=year, y=price))+ geom_point()
ggplot(data=plotdata, aes(x=year, y=price))+ geom_boxplot()
ggplot(data=plotdata, aes(x=year, y=price))+ geom_point()
ggplot(data=plotdata, aes(x=year, y=price))+ geom_histogram(bins=20)
ggplot(data=plotdata, aes(x=price))+ geom_histogram(bins=20)
price_histo <- ggplot(data=plotdata, aes(x=price))+ geom_histogram(bins=20)
price_histo_winners <- ggplot(data=stripedf %>% filter(stripedf$awarded>0), aes(x=price))+ geom_histogram(bins=20)
award_onlydf <- stripedf %>% filter(stripedf$awarded>0)
award_onlydf <- stripedf %>% select(stripedf$awarded>0)
award_onlydf <- stripedf %>% subset(stripedf$awarded>0)
stripedf$awardednum <- as.numeric(stripedf$awarded)
award_onlydf <- stripedf %>% subset(stripedf$awarded>0)
award_onlydf <- stripedf %>% subset(stripedf$awardednum>0)
stripedf$awardednum <- as.numeric(stripedf$awarded)
award_onlydf <- stripedf %>% subset(stripedf$awardednum>0)
award_onlydf <- stripedf %>% filter(stripedf$awardednum>0)
award_onlydf <- stripedf %>% select(stripedf$awardednum>0)
View(stripedf)
stripedf <- read_excel("C:/Users/SAGGESE/Documents/GitHub/amc_ccs/data/stripe_data/cleaned_outputs/manual-aggregated-firmlist.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric"))
stripedf$awardednum <- as.numeric(stripedf$awarded)
award_onlydf <- stripedf %>% filter(awarded>0)
prop_onlydf <- stripedf %>% filter(awarded=0)
prop_onlydf <- stripedf %>% filter(awarded==0)
price_histo_winners <- ggplot(data=award_onlydf, aes(x=price))+ geom_histogram(bins=20)
price_histo_losers <- ggplot(data=prop_onlydf, aes(x=price))+ geom_histogram(bins=20)
plotdata <- stripedf %>% filter(price<1000000)
ggplot(data=plotdata, aes(x=year, y=price))+ geom_point()
price_histo <- ggplot(data=plotdata, aes(x=price))+ geom_histogram(bins=20)
price_histo_winners <- ggplot(data=award_onlydf, aes(x=price))+ geom_histogram(bins=20)
price_histo_losers <- ggplot(data=prop_onlydf, aes(x=price))+ geom_histogram(bins=20)
View(price_histo_winners)
View(price_histo_losers)
View(award_onlydf)
colnames(prop_onlydf)
price_histo_winners <- ggplot(data=award_onlydf, aes(x=award_only$price))+ geom_histogram(bins=20)
price_histo_winners <- ggplot(data=award_onlydf, aes(x=award_onlydf$price))+ geom_histogram(bins=20)
price_histo_losers <- ggplot(data=prop_onlydf, aes(x=prop_onlydf$price))+ geom_histogram(bins=20)
price_histo_losers
price_histo_winners
price_histo
ggplot(award_onlydf, aes(x = award_onlydf$price, y = award_onlydf$offer_quantity)) + geom_point()
ggplot(prop_onlydf, aes(x = prop_onlydf$price, y = prop_onlydf$offer_quantity)) + geom_point()
plotdata <- stripedf %>% filter(price<1000000) %>% filter(offer_quantity<100000000)
ggplot(plotdata, aes(x = pplotdata$price, y = plotdata$offer_quantity)) + geom_point()
plotdata <- stripedf %>% filter(price<1000000) %>% filter(offer_quantity<100000000)
ggplot(plotdata, aes(x = plotdata$price, y = plotdata$offer_quantity)) + geom_point()
plotdata <- stripedf %>% filter(price<1000000) %>% filter(offer_quantity<10000000)
ggplot(plotdata, aes(x = plotdata$price, y = plotdata$offer_quantity)) + geom_point()
fine_tune <- stripedf %>% filter(price<100000) %>% filter(offer_quantity<1000000)
ggplot(fine_tune, aes(x = fine_tune$price, y = fine_tune$offer_quantity)) + geom_point()
fine_tune <- stripedf %>% filter(price<10000) %>% filter(offer_quantity<100000)
ggplot(fine_tune, aes(x = fine_tune$price, y = fine_tune$offer_quantity)) + geom_point()
ggplot(award_onlydf, aes(x = year, y = price)) + geom_point()
ggplot(award_onlydf, aes(x = year, y = offer_quantity)) + geom_point()
View(summary_join)
View(tot_award_sum)
View(tot_losses_sum)
View(sum_1)
View(sum_2)
View(stripedf)
