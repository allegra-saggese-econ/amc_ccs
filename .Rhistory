gpatent_data <-  read_csv("data/stripe_data/cleaned_outputs/google_patent_data_manual_CSV.csv",
col_types = cols(file_date = col_date(format = "%d/%m/%Y")))
full_df <- merge(gpatent_data, stripedf, by=c("applicant_name", "year", "quarter"))
# QA - ISSUE nnot matching 111
rows_dropped <- anti_join(gpatent_data, stripedf, by=c("applicant_name", "year", "quarter"))
nonmatched <- data.frame(unique(rows_dropped$applicant_name))
View(sum_award_group)
unique(rows_dropped$applicant_name)
167-25
167-45
nonmatched <- data.frame(unique(rows_dropped$applicant_name))
rm(nonmatched)
full_df_sum <- full_df %>% group_by(applicant_name, year, quarter) %>%
mutate(sum_patents = sum(!is.na(file_date))) %>%
arrange(file_date)
View(full_df_sum)
qa_no_patents <- full_df_sum %>% filter(sum_patents==0) %>% summarise(n()) # 98 firms without patents
rm(qa_no_patents)
post_prize_patent <- full_df_sum %>%
summarise(count = sum(as.integer(format(file_date, "%Y")) > year, na.rm = TRUE))
full_df_sum <- full_df_sum %>% ungroup()
# fill in missing data
full_df_sum$file_year <- as.numeric(format(full_df_sum$file_date, "%Y"))
View(full_df_sum)
df_regtest <- merge(full_df_sum, post_prize_patent, by = c("applicant_name", "year", "quarter")) %>%
rename(post_app_patents = "count") %>% distinct(applicant_name, year, quarter, .keep_all = TRUE) %>%
arrange(applicant_name, year) %>% ungroup()
wopatents <- df_regtest %>% filter(sum_patents==0)
########## qa of df regtest (dataframe to use for regressions)
any_na <- any(is.na(df_regtest$sum_patents)) # has no missing values (0-77)
# Output the result
if (any_na) {
cat("The column contains NA values.")
} else {
cat("The column does not contain NA values.")
}
patent_outcome <- plm(post_app_patents ~ awarded_factor,
data = df_regtest, index=c("applicant_name", "year", "quarter"), model = "within")
summary(patent_outcome)
# unbalanced panel --- to revisit
patent_outcome_1 <- glm(post_app_patents ~ awarded_factor + year,
data = df_regtest) # want to use year fixed effects - not control for year (two cycles within this)
patent_outcome_2 <- lm(post_app_patents ~ awarded_factor + year,
data = df_regtest) # small positive sig
patent_outcome_3 <- lm(post_app_patents ~ awarded_factor + year,
data = df_regtest) # small positive sig
# some results showing when you control for previous patents --- there is signficance
patent_outcome_4 <- lm(post_app_patents ~ awarded_factor + year +
(sum_patents - post_app_patents), data = df_regtest)
# create new factor variables for regression
df_regtest$year_factor <- as.factor(df_regtest$year)
df_regtest$repeat_factor <- as.factor(df_regtest$previous_application_stripe)
entity_counts <- table(df_regtest$applicant_name)
multiple_year_entities <- names(entity_counts[entity_counts > 1])
filtered_data <- df_regtest[df_regtest$applicant_name %in% multiple_year_entities, ] # 13 firms that applied more than once
balanced_df <- df_regtest[!(df_regtest$applicant_name %in% multiple_year_entities), ]
# issues with this reg model ---- to revisit
patent_outcome_4a <- plm(post_app_patents ~ awarded_factor + (sum_patents - post_app_patents),
data = balanced_df, index = c("applicant_name", "year_factor"), model="within")
# summary stat on some of the variables --- to functionalize
summary(df_regtest$sum_patents)
mean_val <- mean(df_regtest$sum_patents, na.rm=TRUE)
sd_val <- sd(df_regtest$sum_patents, na.rm=TRUE)
filtered_data <- df_regtest %>%
filter(sum_patents <= mean_val + 2 * sd_val)
plot(density(filtered_data$sum_patents), main = "Density Plot without Outliers", xlab = "Sum of patents by applicants")
summary(df_regtest$contractprice)
mean_val <- mean(df_regtest$contractprice, na.rm=TRUE)
sd_val <- sd(df_regtest$contractprice, na.rm=TRUE)
filtered_data <- df_regtest %>%
filter(contractprice <= mean_val + 2 * sd_val)
plot(density(filtered_data$contractprice), main = "Density Plot without Outliers",
xlab = "Contract price distribution (per tonne CO2)")
summary(df_regtest$contract_quantity)
mean_val <- mean(df_regtest$contract_quantity, na.rm=TRUE)
sd_val <- sd(df_regtest$contract_quantity, na.rm=TRUE)
filtered_data <- df_regtest %>%
filter(contract_quantity <= mean_val + 2 * sd_val)
plot(density(filtered_data$contract_quantity), main = "Density Plot without Outliers",
xlab = "Contract quantity distribution (total tonnes)")
mean_val <- mean(df_regtest$price, na.rm=TRUE)
sd_val <- sd(df_regtest$price, na.rm=TRUE)
filtered_data <- df_regtest %>%
filter(price <= mean_val + 2 * sd_val)
plot(density(filtered_data$price), main = "Density Plot without Outliers", xlab = "Offer Price for CO2 tonne")
# compare with out outliers to the one with -- you can see we get more information
boxplot(df_regtest$price, col = "lightgreen", main = "Boxplot of Variable")
hist(filtered_data$price, col = "skyblue", main = "Offer Price Histogram", xlab="Price per tonne (no outliers)")
#### to turn the summary density plots into a function --- in progress
list_cols <- colnames(df_regtest)
num_cols <- df_regtest %>% select_if(is.numeric)
num_cols <- colnames(num_cols)
looplist <- c("capex", "opex", "lifetime mtco2e", "gross project emissions", "offer_quantity", "realised_cost_decrease", "sum_patents", "post_app_patents")
plot_list = list()
# loop through the list of numeric values to see outcomes
for (x in looplist) {
summary(df_regtest[[x]])
mean_val <- mean(df_regtest[[x]], na.rm=TRUE)
sd_val <- sd(df_regtest[[x]], na.rm=TRUE)
filtereddf<- df_regtest %>%
filter(price <= mean_val + 2 * sd_val)
plot <- plot(density(filtereddf[[x]]), main = "Density Plot without Outliers", xlab = "Variable")
plot_list[[x]] <- plot
}
current_date <- Sys.Date()
dates_col <- seq(as.Date("2007-01-01"), current_date, by = "month")
dates_col_2 <- as.yearmon(dates_col)
full_df_sum$treat_date <- as.Date(full_df_sum$effective_date, format = "%d/%m/%Y")
View(full_df_sum)
colnames(full_df_sum)
firm_level_data <- read.csv("C:/Users/SAGGESE/Documents/GitHub/amc_ccs/clean_outputs/firm_level_data.csv")
View(firm_level_data)
dateonly <- merge(full_df_sum, firm_level_data, by=c("quarter", "year", "applicant_name"))
View(dateonly)
colnames(dateonly)
dateonly <- merge(full_df_sum, firm_level_data, by=c("quarter", "year", "applicant_name")) %>%
select(c(applicant_name, effective_date, year, quarter))
View(dateonly)
eff_date <- dateonly %>% group_by("year", "quarter") %>%
mutate(effective_date = replace_na(effective_date, first(effective_date))) %>%
ungroup()
View(eff_date)
firm_level_data <- read.csv("C:/Users/SAGGESE/Documents/GitHub/amc_ccs/clean_outputs/firm_level_data.csv")
#firm_level_data <- read.csv("C:/Users/SAGGESE/Documents/GitHub/amc_ccs/clean_outputs/firm_level_data.csv")
dateonly <- merge(full_df_sum, firm_level_data, by=c("quarter", "year", "applicant_name")) %>%
select(c(applicant_name, effective_date, year, quarter))
eff_date <- dateonly %>% group_by("year", "quarter") %>%
mutate(effective_date = replace_na(effective_date, first(effective_date))) %>%
ungroup()
View(eff_date)
eff_date <- dateonly %>% group_by(quarter, year) %>%
mutate(effective_date = replace_na(effective_date, first(effective_date))) %>%
ungroup()
eff_date <- dateonly %>% group_by(quarter, year) %>%
mutate(effective_date = case_when(is.na(effective_date) ~ effective_date[1],
TRUE ~ effective_date)) %>%
ungroup()
View(eff_date)
full_df_sum <- full_df_sum %>% mutate(case_when(
quarter==3 && year == 2023 ~ as.Date("2023-09-01"),
quarter==2 && year == 2021 ~ as.Date("2021-05-17")
quarter==4 && year == 2021 ~ as.Date("2021-12-05")
full_df_sum <- full_df_sum %>% mutate(case_when(
quarter==3 && year == 2023 ~ as.Date("2023-09-01"),
quarter==2 && year == 2021 ~ as.Date("2021-05-17"),
quarter==4 && year == 2021 ~ as.Date("2021-12-05"),
quarter==2 && year == 2022 ~ as.Date("2022-06-30"),
quarter==4 && year == 2022 ~ as.Date("2022-12-15"),
quarter==1 && year == 2020 ~ as.Date("2020-05-18")
))
View(full_df_sum)
full_df_sum <- full_df_sum %>% mutate(treat_date =
case_when(
(quarter==3 && year == 2023) ~ as.Date("2023-09-01"),
(quarter==2 && year == 2021) ~ as.Date("2021-05-17"),
(quarter==4 && year == 2021) ~ as.Date("2021-12-05"),
(quarter==2 && year == 2022) ~ as.Date("2022-06-30"),
(quarter==4 && year == 2022) ~ as.Date("2022-12-15"),
(quarter==1 && year == 2020) ~ as.Date("2020-05-18"),
TRUE ~ NA
))
View(full_df_sum)
full_df_sum <- full_df_sum %>% mutate(treat_date == case_when(
(quarter==3 && year == 2023) ~ as.Date("2023-09-01"),
(quarter==2 && year == 2021) ~ as.Date("2021-05-17"),
(quarter==4 && year == 2021) ~ as.Date("2021-12-05"),
(quarter==2 && year == 2022) ~ as.Date("2022-06-30"),
(quarter==4 && year == 2022) ~ as.Date("2022-12-15"),
(quarter==1 && year == 2020) ~ as.Date("2020-05-18"),
TRUE ~ NA
))
dplyr::last_dplyr_warnings()
full_df_sum <- full_df_sum %>% mutate(treat_date == case_when(
(quarter==3 & year == 2023) ~ as.Date("2023-09-01"),
(quarter==2 & year == 2021) ~ as.Date("2021-05-17"),
(quarter==4 & year == 2021) ~ as.Date("2021-12-05"),
(quarter==2 & year == 2022) ~ as.Date("2022-06-30"),
(quarter==4 & year == 2022) ~ as.Date("2022-12-15"),
(quarter==1 & year == 2020) ~ as.Date("2020-05-18"),
TRUE ~ NA
))
View(full_df_sum)
colnames(full_df_sum)
full_df_sum <- full_df_sum %>% mutate(treat_date = case_when(
(quarter==3 & year == 2023) ~ as.Date("2023-09-01"),
(quarter==2 & year == 2021) ~ as.Date("2021-05-17"),
(quarter==4 & year == 2021) ~ as.Date("2021-12-05"),
(quarter==2 & year == 2022) ~ as.Date("2022-06-30"),
(quarter==4 & year == 2022) ~ as.Date("2022-12-15"),
(quarter==1 & year == 2020) ~ as.Date("2020-05-18"),
TRUE ~ NA
))
full_df_sum$treat_date
is.na(full_df_sum$treat_date)
full_df_sum <- full_df_sum %>% mutate(treat_date = case_when(
(quarter==3 & year == 2023) ~ as.Date("2023-09-01"),
(quarter==2 & year == 2021) ~ as.Date("2021-05-17"),
(quarter==4 & year == 2021) ~ as.Date("2021-12-05"),
(quarter==2 & year == 2022) ~ as.Date("2022-06-30"),
(quarter==4 & year == 2022) ~ as.Date("2022-12-15"),
(quarter==1 & year == 2020) ~ as.Date("2020-05-18"),
TRUE ~ NA
)) %>% select(-c("case_when(...)", "treat_date == ..."))
full_df_sum$treat_date
full_df_sum <- full_df_sum %>% mutate(treat_date = case_when(
(quarter==3 & year == 2023) ~ as.Date("2023-09-01"),
(quarter==2 & year == 2021) ~ as.Date("2021-05-17"),
(quarter==4 & year == 2021) ~ as.Date("2021-12-05"),
(quarter==2 & year == 2022) ~ as.Date("2022-06-30"),
(quarter==4 & year == 2022) ~ as.Date("2022-12-15"),
(quarter==1 & year == 2020) ~ as.Date("2020-05-18"),
TRUE ~ NA
)) %>% select(-c("assignee", "classification_6", "classification_5"))
df_did_format <- full_df_sum
df_did_format$m_y <- paste(year(df_did_format$file_date), month(df_did_format$file_date), sep = "-")
df_did_format$m_y <- as.yearmon(df_did_format$m_y)
df_did_format$key = paste0(df_did_format$applicant_name, df_did_format$year, df_did_format$quarter)
# take unique firms and create firms for each month in the project period
firmsonly <- full_df_sum %>%
mutate(key = paste0(applicant_name, year, quarter)) %>%
distinct(key, .keep_all = TRUE)
firm_month_interval <- expand.grid(key = firmsonly$key, m_y = dates_col_2)
# before cleaning - need to QA the treat_date column
summary(df_did_format$treat_date)
qadf <- df_did_format %>% filter(is.na(treat_date))
qadf2 <- df_did_format %>% filter(is.na(m_y))# issue is I kept the patent data of non-patented firms
firmsonly <- full_df_sum %>%
mutate(key = paste0(applicant_name, year, quarter)) %>%
distinct(key, .keep_all = TRUE)
firm_month_interval <- expand.grid(key = firmsonly$key, m_y = dates_col_2)
View(firm_month_interval)
# before cleaning - need to QA the treat_date column
summary(df_did_format$treat_date)
qadf <- df_did_format %>% filter(is.na(treat_date))
qadf2 <- df_did_format %>% filter(is.na(m_y))# issue is I kept the patent data of non-patented firms
joined_panel_2 <- df_did_format %>% group_by(key, m_y) %>%
mutate(patents_in_period = sum(!is.na(file_date))) %>% # create col for the number of patents in each period
ungroup() %>% filter(!sum_patents ==0) # drop where there are no patents
qadf3 <- joined_panel_2 %>% filter(is.na(m_y))
# drop the duplicate patents (i.e. filed in two locations)
joined_panel_3 <- joined_panel_2 %>% filter(!is.na(patents_in_period)) %>%
group_by(key, m_y, patent_name) %>%
filter(row_number() == 1) %>%
ungroup() %>%
group_by(key, m_y) %>%
mutate(unique_patents_in_period = n())
jp2 <- joined_panel_2 %>% select(c(patents_in_period, key, m_y, file_date,
file_year, patent_name, application_number,
inventor_1, quarter, year, treat_date))
jp3 <- joined_panel_3 %>% select(c(key, m_y, patent_name, unique_patents_in_period))
# summarise patent level data (count of total, count of unique)
jp_to_add <- merge(jp2, jp3, by=c("key", "m_y", "patent_name")) %>% filter(file_date > as.Date("2020-05-01"))
jp_to_add_unique <- jp_to_add %>% group_by(key, m_y) %>% #may need to check the texts from google patent if some are too similar
slice(1)
#remerge patent data back
did_merged <- left_join(firm_month_interval, jp_to_add_unique, by = c("m_y", "key")) %>%
arrange("m_y", "key")
qa_count <- jp_to_add_unique %>% ungroup() %>% group_by(key) %>%
slice(1)
# take all the pre 2020 and summarise them as pre 2020 and have it as one period -- attach afterwards?
pre_period_patents <- merge(jp2, jp3, by=c("key", "m_y", "patent_name")) %>%
filter(file_date <= as.Date("2007-01-01")) # 194 pre-2020 patents for the firms that need to be added in as 'pre' period patents
pre_period_unique <- pre_period_patents %>% group_by(key, m_y) %>%
slice(1) %>%
ungroup %>%
group_by(key) %>%
mutate(pre_period_patents_sum = n()) # new column for all the pre-treatment timeframe patents
pre_period_unique <- pre_period_patents %>% group_by(key, m_y) %>%
slice(1) %>%
ungroup %>%
group_by(key) %>%
mutate(pre_period_patents_sum = n()) # new column for all the pre-treatment timeframe patents
############ merge back in firm-level data to did_merged
df_regtest$key = paste0(df_regtest$applicant_name, df_regtest$year, df_regtest$quarter)
clean_firm_level <- df_regtest %>%
select(-c(applicant_name, effective_date, decision_date, patent_name, patent_region,
patent_no, patent_no_list, application_number, file_date, assignee, abandoned, citations,
classification_1, classification_2, classification_3, classification_4, classification_5,
classification_6, classification_7, classification_8, inventor_1, post_app_patents, file_year,
quarter, year))
############ merge back in firm-level data to did_merged
df_regtest$key = paste0(df_regtest$applicant_name, df_regtest$year, df_regtest$quarter)
clean_firm_level <- df_regtest %>%
select(-c(applicant_name, decision_date, patent_name, patent_region,
patent_no, patent_no_list, application_number, file_date, assignee, abandoned, citations,
classification_1, classification_2, classification_3, classification_4, classification_5,
classification_6, classification_7, classification_8, inventor_1, post_app_patents, file_year,
quarter, year))
clean_firm_level <- df_regtest %>%
select(-c(applicant_name, patent_name, patent_region,
patent_no, patent_no_list, application_number, file_date, assignee, abandoned, citations,
classification_1, classification_2, classification_3, classification_4, classification_5,
classification_6, classification_7, classification_8, inventor_1, post_app_patents, file_year,
quarter, year))
# merge firm level data back in
full_did_df <- did_merged %>% select(-c(patent_name, application_number, inventor_1)) %>%
left_join(clean_firm_level, by="key")
View(full_did_df)
write.csv(full_df_sum, "patent_level_df.csv")
write.csv(full_did_df, "did_df.csv")
library(readxl)
historical_df_orbis <- read_excel("data/orbis/historical_df_orbis.xlsx",
sheet = "Results")
View(historical_df_orbis)
############################ LOAD IN THE ORBIS DATA ####################################
orbis <- read_excel("data/orbis/historical_df_orbis.xlsx", sheet = "Results")
rm(historical_df_orbis)
colnames(historical_df_orbis)
colnames(orbis)
df_filtered <- orbis %>%
select(-matches("\\.{3}\\d{2}$"))
orbis_long <- df_filtered %>%
pivot_longer(
cols = everything(), # Considering all columns
names_to = c(".value", "group"),
names_pattern = " - \\d+$"
)
orbis_long <- df_filtered %>%
pivot_longer(
cols = everything(), # Considering all columns
names_to = c(".value", "group"),
names_pattern = "([[:digit:]]+)$"
)
orbis_long <- df_filtered %>%
pivot_longer(
cols = everything(), # Considering all columns
names_to = c(".value", "group"),
names_pattern = "(.*Year - \\d{1,2})"
)
orbis_long <- df_filtered %>%
pivot_longer(
cols = everything(), # Considering all columns
names_to = c(".value", "group"),
names_pattern = "(.*)(.*Year - \\d{1,2})"
)
rlang::last_trace()
df_filtered <- orbis %>%
select(-matches("\\.{3}\\d{2}$")) %>%
select(-matches("\\.{3}\\d{3}$"))
orbis_long <- df_filtered %>%
pivot_longer(
cols = everything(), # Considering all columns
names_to = c(".value", "group"),
names_pattern = "(.*)(.*Year - \\d{1,2})"
)
matched_cols <- grep("(.*)(.*Year - \\d{1,2})", col_names, value = TRUE)
matched_cols <- grep("(.*)(.*Year - \\d{1,2})", colnames(df_filtered), value = TRUE)
matched_cols
orbis_long <- df_filtered %>%
pivot_longer(
cols = all_of(matched_cols), # consider matched cols with annual ending
names_to = "colname",
values_to =  "value"
)
View(orbis_long)
prefixes <- gsub("(.*)(.*Year - \\d{1,2})", "\\1", matched_cols)
unique_prefixes <- unique(prefixes)
orbis_long <- df_filtered %>%
pivot_longer(
cols = all_of(matched_cols), # consider matched cols with annual ending
names_to = "colname",
values_to =  "value"
) %>%
mutate(prefix = gsub("(.*)(.*Year - \\d{1,2})", "\\1", colname)
) %>%
pivot_wider(
names_from = prefix,
values_from = value,
values_fill = list(value = NA)
) %>%
select(-colname)
View(orbis_long)
colnames(orbis_long)
orbis_long <- df_filtered %>%
pivot_longer(
cols = all_of(matched_cols), # consider matched cols with annual ending
names_to = "colname",
values_to =  "value"
) %>%
mutate(prefix = gsub("(.*)(.*Year - \\d{1,2})", "\\1", colname)
) %>%
pivot_wider(
names_from = prefix,
values_from = value,
values_fill = list(value = NA)
)
orbis_long$colname
write.csv(orbis_long, "orbis_long.csv")
class(orbis_long)
write.csv(orbis_long, "orbis_long.csv")
unnest_orbis <- orbis_long %>% unnest_wider(everything())
write.csv(unnest_orbis, "orbis_long.csv")
unnest_orbis <- orbis_long %>% unnest_wider(everything())
unnest_orbis <- orbis_long %>% select(-c(colname))
write.csv(unnest_orbis, "orbis_long.csv")
write.csv(unnest_orbis, "orbis_long.csv", rown.names = FALSE)
unnest_orbis <- orbis_long %>% select(-c(colname)) %>%
unnest_wider(everything(), names_sep="_")
View(long_reg)
orbis <- read_excel("data/orbis/historical_df_orbis.xlsx", sheet = "Results")
df_filtered <- orbis %>%
select(-matches("\\.{3}\\d{2}$")) %>%
select(-matches("\\.{3}\\d{3}$"))
matched_cols <- grep("(.*)(.*Year - \\d{1,2})", colnames(df_filtered), value = TRUE)
prefixes <- gsub("(.*)(.*Year - \\d{1,2})", "\\1", matched_cols)
unique_prefixes <- unique(prefixes)
orbis_long <- df_filtered %>%
pivot_longer(
cols = all_of(matched_cols), # consider matched cols with annual ending
names_to = "colname",
values_to =  "value"
) %>%
mutate(prefix = gsub("(.*)(.*Year - \\d{1,2})", "\\1", colname)
) %>%
pivot_wider(
names_from = prefix,
values_from = value,
values_fill = list(value = NA)
)
unnest_orbis <- orbis_long %>% select(-c(colname)) %>%
unnest_wider(everything(), names_sep="_")
# export long form orbis
write.csv(unnest_orbis, "orbis_long.csv", rown.names = FALSE)
View(unnest_orbis)
summary(unnest_orbis)
class(unnest_orbis)
unnest_orbis <- orbis_long %>% select(-c(colname)) %>%
unnest_wider(everything(), names_sep="_") %>% as.data.frame()
# summary statistics on STRIPE data
library(readr)
library(readxl)
library(plm)
library(stats)
library(lmtest)
library(tidyr)
library(tidyverse)
library(dplyr)
library(survival)
library(ggplot2)
library(ggpubr)
library(zoo)
unnest_orbis <- orbis_long %>% select(-c(colname)) %>%
unnest_wider(everything(), names_sep="_") %>% as.data.frame()
unnest_orbis <- as.data.frame(unnest_orbis)
# export long form orbis
write.csv(unnest_orbis, "orbis_long.csv", row.names = FALSE)
unnest_orbis <- orbis_long %>%
unnest_wider(everything(), names_sep="_")
unnest_orbis <- as.data.frame(unnest_orbis)
View(orbis_long)
View(df_filtered)
View(unnest_orbis)
colnames(unnest_orbis)
orbis <- read_excel("data/orbis/historical_df_orbis.xlsx", sheet = "Results")
df_filtered <- orbis %>%
select(-matches("\\.{3}\\d{2}$")) %>%
select(-matches("\\.{3}\\d{3}$"))
matched_cols <- grep("(.*)(.*Year - \\d{1,2})", colnames(df_filtered), value = TRUE)
prefixes <- gsub("(.*)(.*Year - \\d{1,2})", "\\1", matched_cols)
unique_prefixes <- unique(prefixes)
orbis_long <- df_filtered %>%
pivot_longer(
cols = all_of(matched_cols), # consider matched cols with annual ending
names_to = "colname",
values_to =  "value"
) %>%
mutate(prefix = gsub("(.*)(.*Year - \\d{1,2})", "\\1", colname)
) %>%
pivot_wider(
names_from = prefix,
values_from = value,
values_fill = list(value = NA)
)
unnest_orbis <- orbis_long %>%
unnest_wider(everything(), names_sep="_")
View(orbis_long)
View(unnest_orbis)
unnest_orbis <- as.data.frame(unnest_orbis)
# export long form orbis
write.csv(unnest_orbis, "orbis_long.csv", row.names = FALSE)
username <- Sys.getenv("USER")  # or use "ignaciobanaressanchez", "ibanares", "BANARESS" for testing
username
cw()
cwd()
getwd()
username <- Sys.getenv("USER")  # or use "ignaciobanaressanchez", "ibanares", "BANARESS" for testing
if (username == "ignaciobanaressanchez") {
projdir <- "/Users/ignaciobanaressanchez/LSE Energy Dropbox/Ignacio Banares/Projects/AMCs"
} else if (username == "ibanares") {
projdir <- "/Users/ibanares/LSE Energy Dropbox/Ignacio Banares/Projects/AMCs"
} else if (username == "BANARESS") {
projdir <- "C:/Users/BANARESS/LSE Energy Dropbox/Ignacio Banares/Projects/AMCs"
} else if (username == "allegrasaggese") {
projdir <- "/Users/allegrasaggese/Documents/GitHub/amc_ccs/data"
}
orbis_data <- read_csv(file.path(projdir, "data/orbis/orbis_gen_1.csv"))
library(readr)
read_csv()
patent_data <- read_csv(file.path(projdir, "cleaned_outputs/did_df.csv"))
# Import patent<>firm matched data
patent_data <- read_csv(file.path(projdir, "clean_outputs/did_df.csv"))
username <- Sys.getenv("USER")  # or use "ignaciobanaressanchez", "ibanares", "BANARESS" for testing
if (username == "ignaciobanaressanchez") {
projdir <- "/Users/ignaciobanaressanchez/LSE Energy Dropbox/Ignacio Banares/Projects/AMCs"
} else if (username == "ibanares") {
projdir <- "/Users/ibanares/LSE Energy Dropbox/Ignacio Banares/Projects/AMCs"
} else if (username == "BANARESS") {
projdir <- "C:/Users/BANARESS/LSE Energy Dropbox/Ignacio Banares/Projects/AMCs"
} else if (username == "allegrasaggese") {
projdir <- "/Users/allegrasaggese/Documents/GitHub/amc_ccs/"
}
patent_data <- read_csv(file.path(projdir, "clean_outputs/did_df.csv"))
