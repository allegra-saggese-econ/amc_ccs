library(readr)
library(readxl)
library(tidyr)
library(tidyverse)
library(dplyr)
library(ggplot2)
devtools::install_github("r-lib/conflicted")
install.packages(devtools)
install.packages("devtools")
devtools::install_github("r-lib/conflicted")
orbis_renamed <- orbis %>%
rename_with(.cols = ends_with("Last avail. yr"),
.fn = ~ sub("Last avail\\. yr", "Year - 0", .))
# Pivot the dataframe from wide to long format
orbis_long <- orbis_renamed %>%
pivot_longer(
cols = matches("Year - \\d+"), # Select columns ending in "Year - ..."
names_to = c(".value", "Year"),
names_pattern = "(.*) Year - (\\d+)"
) %>%
mutate(Year = 2023 - as.integer(Year)) # Convert year pattern to actual years
# Print the transformed dataframe
print(orbis_24_long)
orbis_24_long <- orbis_renamed %>%
pivot_longer(
cols = matches("Year - \\d+"), # Select columns ending in "Year - ..."
names_to = c(".value", "Year"),
names_pattern = "(.*) Year - (\\d+)"
) %>%
mutate(Year = 2023 - as.integer(Year)) # Convert year pattern to actual years
# Print the transformed dataframe
print(orbis_24_long)
View(orbis_24_long)
colnames(orbis_24_long)
replace_na_text <- function(df) {
df %>%
mutate_all(~ ifelse(. == "n.a.", NA, .)) # Replace "n.a." with NA across all columns
}
# Example usage:
orbis_24_long_cleaned <- replace_na_text(orbis_24_long)
View(orbis_24_long_cleaned)
# function to calculate NA percentage
na_percentage <- function(column) {
mean(is.na(column)) * 100
}
orbis_24_na_summary <- orbis_24_long_cleaned %>%
group_by(Year) %>%
summarize(across(everything(), na_percentage))
View(orbis_24_na_summary)
na_percentage_by_year <- function(df) {
df %>%
group_by(Year) %>%
summarise(across(-Year, ~ mean(is.na(.)) * 100)) # Exclude Year column, calculate NA percentage
}
# Example usage:
orbis_24_na_summary <- na_percentage_by_year(orbis_24_long)
# function to calculate NA percentage
na_percentage_by_year <- function(df) {
df %>%
group_by(Year) %>%
summarise(across(-Year, ~ mean(is.na(.)) * 100)) # Exclude Year column, calculate NA percentage
}
# Example usage:
orbis_24_na_summary <- na_percentage_by_year(orbis_24_long_cleaned)
View(orbis_24_long_cleaned)
colnames(orbis_24_long_cleaned)
na_percentage_by_year <- function(df) {
df %>%
group_by(Year) %>%
summarise(across(-Year, ~ mean(is.na(.)) * 100)) # Exclude Year column, calculate NA percentage
}
# Example usage:
orbis_24_na_summary <- na_percentage_by_year(orbis_24_long_cleaned)
class(orbis_24_long_cleaned$Year)
na_percentage_by_year <- function(df) {
df %>%
group_by(Year) %>%
summarise(across(where(is.numeric), ~ mean(is.na(.)) * 100))  # Calculate NA percentage for all numeric columns
}
orbis_24_na_summary <- na_percentage_by_year(orbis_24_long_cleaned)
View(orbis_24_na_summary)
sapply(orbis_24_long_cleaned, class)
# id column formats
class_cols <- sapply(orbis_24_long_cleaned, class)
# id column formats
class_cols <- as.dataframe(sapply(orbis_24_long_cleaned, class))
# id column formats
class_cols <- dataframe(sapply(orbis_24_long_cleaned, class))
# id column formats
class_cols <- sapply(orbis_24_long_cleaned, class)
as.table()
# id column formats
class_cols <- table(sapply(orbis_24_long_cleaned, class))
class_cols
# id column formats
class_cols <-
sum_class_cols <- table(sapply(orbis_24_long_cleaned, class))
# id column formats
class_cols <- sapply(orbis_24_long_cleaned, class)
print(class_cols)
View(orbis_24_long_cleaned)
#### Cleaning step 2 (need to preserve the ORBIS date/time column
# Rename the columns to standardize the year pattern
orbis_renamed <- orbis %>%
rename_with(.cols = ends_with("Last avail. yr"),
.fn = ~ sub("Last avail\\. yr", "Year - 0", .))
View(orbis_renamed)
View(orbis)
no_employee <- grep("Number of employees", colnames(your_dataframe), value = TRUE)
no_employee <- grep("^number of employees", colnames(orbis), value = TRUE)
View(orbis_renamed)
no_employee <- grep("^number of employees", colnames(orbis), value = TRUE)
no_employee <- grep("number of employees", colnames(orbis), value = TRUE)
no_employee <- grepl("number of employees", colnames(orbis), value = TRUE)
no_employee <- grepl("Number of employees", colnames(orbis), value = TRUE)
no_employee <- grep("Number of employees", colnames(orbis), value = TRUE)
print(no_employee)
# repeats on year 1,2,3,4
employee_year_columns <- grep("Number of employees Year - [1-4]", colnames(orbis), value = TRUE)
subset_df <- orbis[, employee_year_columns]
View(subset_df)
employee_year_columns <- grep("Number of employees Year - [1-4]", colnames(orbis), value = TRUE)
no_employee <- grep("Number of employees", colnames(orbis), value = TRUE)
no_employee <- grep("Number of employees", colnames(orbis), value = TRUE)
# repeats on year 1,2,3,4
employee_year_columns <- grep("Number of employees\nYear - [1-4]", colnames(orbis), value = TRUE)
subset_df <- orbis[, employee_year_columns]
View(subset_df)
# subset from manual check looks duplicated -- will check again
comparison_results <- list()
# subset from manual check looks duplicated -- will check again
comparison_results <- list()
for (year in 1:4) {
# Step 3: Find all columns related to this year
year_cols <- grep(paste0("Number of employees\nYYear - ", year), employee_year_columns, value = TRUE)
# Step 4: Pairwise comparison between columns for this year
if (length(year_cols) > 1) {
for (i in 1:(length(year_cols) - 1)) {
for (j in (i + 1):length(year_cols)) {
col1 <- year_cols[i]
col2 <- year_cols[j]
# Compare the two columns and store the result
comparison_results[[paste(col1, "vs", col2)]] <- all.equal(your_dataframe[[col1]], your_dataframe[[col2]])
}
}
}
}
# Print the comparison results
print(comparison_results)
# Step 3: Find all columns related to this year
year_cols <- grep(paste0("Number of employees\nYear - ", year), employee_year_columns, value = TRUE)
# Step 4: Pairwise comparison between columns for this year
if (length(year_cols) > 1) {
for (i in 1:(length(year_cols) - 1)) {
for (j in (i + 1):length(year_cols)) {
col1 <- year_cols[i]
col2 <- year_cols[j]
# Compare the two columns and store the result
comparison_results[[paste(col1, "vs", col2)]] <- all.equal(your_dataframe[[col1]], your_dataframe[[col2]])
}
}
}
# subset from manual check looks duplicated -- will check again
comparison_results <- list()
for (year in 1:4) {
# Step 3: Find all columns related to this year
year_cols <- grep(paste0("Number of employees\nYear - ", year), employee_year_columns, value = TRUE)
# Step 4: Pairwise comparison between columns for this year
if (length(year_cols) > 1) {
for (i in 1:(length(year_cols) - 1)) {
for (j in (i + 1):length(year_cols)) {
col1 <- year_cols[i]
col2 <- year_cols[j]
# Compare the two columns and store the result
comparison_results[[paste(col1, "vs", col2)]] <- all.equal(orbis[[col1]], orbis[[col2]])
}
}
}
}
# Print the comparison results
print(comparison_results)
subset_df <- orbis[, employee_year_columns]
# subset from manual check looks duplicated -- will check again
comparison_results <- list()
for (year in 1:4) {
# Step 3: Find all columns related to this year
year_cols <- grep(paste0("Number of employees\nYear - ", year), employee_year_columns, value = TRUE)
# Step 4: Pairwise comparison between columns for this year
if (length(year_cols) > 1) {
for (i in 1:(length(year_cols) - 1)) {
for (j in (i + 1):length(year_cols)) {
col1 <- year_cols[i]
col2 <- year_cols[j]
# Compare the two columns and store the result
comparison_results[[paste(col1, "vs", col2)]] <- all.equal(subset_df[[col1]], subset_df[[col2]])
}
}
}
}
# Print the comparison results
print(comparison_results)
View(orbis_24_long)
View(orbis_24_long)
##### Load in raw historical data, taken from download on ORBIS
orbis <- read_excel("data/orbis/historical_df_orbis.xlsx", sheet = "Results")
#' Author: [Allegra Saggese]
#' Purpose: Clean orbis data for merging with firm-level data,
#' firstly, transform the Orbis dataframe from wide to long format.
#' Last updated: `r format(Sys.Date(), "%Y-%m-%d")`
library(readr)
library(readxl)
library(tidyr)
library(tidyverse)
library(dplyr)
library(ggplot2)
##### Load in raw historical data, taken from download on ORBIS
orbis <- read_excel("data/orbis/historical_df_orbis.xlsx", sheet = "Results")
View(orbis)
library(tidyr)
library(tidyr)
library(tidyr)
#' Author: [Allegra Saggese]
#' Purpose: Clean orbis data for merging with firm-level data,
#' firstly, transform the Orbis dataframe from wide to long format.
#' Last updated: `r format(Sys.Date(), "%Y-%m-%d")`
library(readr)
library(readxl)
library(tidyr)
library(tidyverse)
library(dplyr)
library(ggplot2)
##### Load in raw historical data, taken from download on ORBIS
orbis <- read_excel("data/orbis/historical_df_orbis.xlsx", sheet = "Results")
# First attempt on data cleaning
#### -------------------------------
df_filtered <- orbis %>%
select(-matches("\\.{3}\\d{2}$")) %>%
select(-matches("\\.{3}\\d{3}$"))
matched_cols <- grep("(.*)(.*Year - \\d{1,2})", colnames(df_filtered), value = TRUE)
prefixes <- gsub("(.*)(.*Year - \\d{1,2})", "\\1", matched_cols)
unique_prefixes <- unique(prefixes)
orbis_long <- df_filtered %>%
pivot_longer(
cols = all_of(matched_cols), # consider matched cols with annual ending
names_to = "colname",
values_to =  "value"
) %>%
mutate(prefix = gsub("(.*)(.*Year - \\d{1,2})", "\\1", colname)
) %>%
pivot_wider(
names_from = prefix,
values_from = value,
values_fill = list(value = NA)
)
unnest_orbis <- orbis_long %>%
unnest_wider(everything(), names_sep="_")
unnest_orbis <- as.data.frame(unnest_orbis)
View(unnest_orbis)
View(unnest_orbis)
clean_orbis <- unnest_orbis %>%
select(where(~ !all(is.na(.)) & !all(. == "n.a.", na.rm = TRUE)))
empty_cols <- sapply(unnest_orbis, function(x) all(is.na(x) | x == "n.a."))
# Drop those columns
clean_orbis-QA <- unnest_orbis[, !empty_cols]
empty_cols <- sapply(unnest_orbis, function(x) all(is.na(x) | x == "n.a."))
clean_orbis_QA <- unnest_orbis[, !empty_cols]
# export long form orbis
date_str <- Sys.Date()
filename <- paste0("orbis_long_", date_str, ".csv")
write.csv(clean_orbis, filename, row.names = FALSE)
View(clean_orbis)
#### Cleaning step 2 (need to preserve the ORBIS date/time column
# Rename the columns to standardize the year pattern
orbis_renamed <- orbis %>%
rename_with(.cols = ends_with("Last avail. yr"),
.fn = ~ sub("Last avail\\. yr", "Year - 0", .))
View(orbis_renamed)
no_employee <- grep("Number of employees", colnames(orbis), value = TRUE)
# repeats on year 1,2,3,4
employee_year_columns <- grep("Number of employees\nYear - [1-4]", colnames(orbis), value = TRUE)
subset_df <- orbis[, employee_year_columns]
# subset from manual check looks duplicated -- will check again
comparison_results <- list()
for (year in 1:4) {
# Step 3: Find all columns related to this year
year_cols <- grep(paste0("Number of employees\nYear - ", year), employee_year_columns, value = TRUE)
# Step 4: Pairwise comparison between columns for this year
if (length(year_cols) > 1) {
for (i in 1:(length(year_cols) - 1)) {
for (j in (i + 1):length(year_cols)) {
col1 <- year_cols[i]
col2 <- year_cols[j]
# Compare the two columns and store the result
comparison_results[[paste(col1, "vs", col2)]] <- all.equal(subset_df[[col1]], subset_df[[col2]])
}
}
}
}
# Print the comparison results
print(comparison_results) # no string mismatches for equivalent years, can drop the dupes
# Pivot the dataframe from wide to long format
orbis_24_long <- orbis_renamed %>%
pivot_longer(
cols = matches("Year - \\d+"), # Select columns ending in "Year - ..."
names_to = c(".value", "Year"),
names_pattern = "(.*) Year - (\\d+)"
) %>%
mutate(Year = 2023 - as.integer(Year)) # Convert year pattern to actual years
# Print the transformed dataframe
print(orbis_24_long)
## check to see what percentage of the variables contain data for year-firm matches
# clean formatting of na values
replace_na_text <- function(df) {
df %>%
mutate_all(~ ifelse(. == "n.a.", NA, .)) # Replace "n.a." with NA across all columns
}
# clean dataframe
orbis_24_long_cleaned <- replace_na_text(orbis_24_long)
# id column formats
class_cols <- sapply(orbis_24_long_cleaned, class)
sum_class_cols <- table(sapply(orbis_24_long_cleaned, class))
# function to calculate NA percentage
na_percentage_by_year <- function(df) {
df %>%
group_by(Year) %>%
summarise(across(where(is.numeric), ~ mean(is.na(.)) * 100))  # Calculate NA percentage for all numeric columns
}
# Example usage:
orbis_24_na_summary <- na_percentage_by_year(orbis_24_long_cleaned)
# Print the NA percentage summary
print(orbis_24_na_summary)
View(orbis_24_na_summary)
View(orbis_24_long_cleaned)
##### Load in raw historical data, taken from download on ORBIS
orbis <- read_excel("data/orbis/historical_df_orbis.xlsx", sheet = "Results")
View(orbis)
colnames(orbis)
library(stringr)
orbis <- read_excel("data/orbis/historical_df_orbis.xlsx", sheet = "Results")
clean_and_replace_years <- function(names, base_year = 2024) {
names %>%
str_replace_all("\n", " ") %>%          # Replace newline characters with spaces
str_replace_all("\\.\\.\\..*", "") %>%  # Remove trailing dots/numbers
str_replace_all("Last avail. yr", as.character(base_year)) %>%  # Assume last available year is 2024
str_replace_all("Year - (\\d+)", function(x) {
year_num <- as.numeric(str_extract(x, "\\d+"))
return(as.character(base_year - year_num))
})
}
# Apply function to column names
colnames(orbis) <- clean_and_replace_years(colnames(orbis), base_year = 2024)
# Check new column names
print(colnames(orbis))
View(orbis)
colnames(orbis)
# WIDE TO LONG FORMAT
colnames(orbis)[colnames(orbis) == "Company name Latin alphabet"] <- "firm_name"
orbis_long_X <- orbis %>%
pivot_longer(
cols = -c(firm_name),  # Keep firm identifier(s) fixed
names_to = c(".value", "Year"),  # Split column names into "Variable" and "Year"
names_pattern = "^(.*) (\\d{4})$"  # Extract variable name + year from column names
)
# check dupes
any(duplicated(colnames(orbis)))  # Check if duplicate column names exist
colnames(orbis) <- make.unique(colnames(orbis))
colnames(orbis)
list(duplicated(colnames(orbis))
print(duplicated(colnames(orbis)))
colnames(orbis)[colnames(orbis) == ""] <- paste0("Unnamed_", seq_len(sum(colnames(orbis) == "")))
static_cols <- colnames(orbis)[!str_detect(colnames(orbis), "\\d{4}$")]
# Create a separate dataframe for static columns
orbis_static <- orbis %>%
select(all_of(static_cols))
# Keep only the columns that need to be pivoted
orbis_pivot <- orbis %>%
select(-all_of(static_cols))
dim(orbis_static)  # Number of static columns
dim(orbis_pivot)   # Number of columns to pivot
649+62
orbis <- read_excel("data/orbis/historical_df_orbis.xlsx", sheet = "Results")
# CLEAN COLNAMES
# Function to clean column names and replace "Year - X" with actual years
clean_and_replace_years <- function(names, base_year = 2024) {
names %>%
str_replace_all("\n", " ") %>%          # Replace newline characters with spaces
str_replace_all("\\.\\.\\..*", "") %>%  # Remove trailing dots/numbers
str_replace_all("Last avail. yr", as.character(base_year)) %>%  # Assume last available year is 2024
str_replace_all("Year - (\\d+)", function(x) {
year_num <- as.numeric(str_extract(x, "\\d+"))
return(as.character(base_year - year_num))
})
}
# Apply function to column names
colnames(orbis) <- clean_and_replace_years(colnames(orbis), base_year = 2024)
print(colnames(orbis))
# WIDE TO LONG FORMAT
colnames(orbis)[colnames(orbis) == "Company name Latin alphabet"] <- "firm_name"
# check dupes
any(duplicated(colnames(orbis)))  # duplicates exist
colnames(orbis) <- make.unique(colnames(orbis))
colnames(orbis)[colnames(orbis) == ""] <- paste0("Unnamed_", seq_len(sum(colnames(orbis) == "")))
# take out static cols before we pivot
static_cols <- colnames(orbis)[!str_detect(colnames(orbis), "\\d{4}$")]
orbis_static <- orbis %>%
select(all_of(static_cols))
# Keep only the columns that need to be pivoted
orbis_pivot <- orbis %>%
select(-all_of(static_cols))
# cols sum to 711 - total in raw data
dim(orbis_static)  # Number of static columns
dim(orbis_pivot)   # Number of columns to pivot
orbis_long <- orbis_pivot %>%
pivot_longer(
cols = everything(),  # Pivot all columns in orbis_pivot
names_to = c(".value", "Year"),
names_pattern = "^(.*) (\\d{4})\\.*\\d*$"  # Extract variable name + year, ignoring suffixes
) %>%
mutate(Year = as.numeric(Year))  # Convert Year column to numeric
# Check transformed data
head(orbis_long)
View(orbis_long)
# Keep only the columns that need to be pivoted
orbis_pivot <- orbis %>%
select(-all_of(setdiff(static_cols, "firm_name")))
View(orbis_pivot)
orbis_long <- orbis_pivot %>%
pivot_longer(
cols = -firm_name
names_to = c(".value", "Year"),
orbis_long <- orbis_pivot %>%
pivot_longer(
cols = -(firm_name)
names_to = c(".value", "Year"),
orbis_long <- orbis_pivot %>%
pivot_longer(
cols = -c(firm_name)
names_to = c(".value", "Year"),
# WIDE TO LONG
orbis_long <- orbis_pivot %>%
pivot_longer(
cols = -c(firm_name),
names_to = c(".value", "Year"),
names_pattern = "^(.*) (\\d{4})\\.*\\d*$"  # Extract variable name + year, ignoring suffixes
) %>%
mutate(Year = as.numeric(Year))  # Convert Year column to numeric
# Check transformed data
head(orbis_long)
View(orbis_long)
orbis_final <- left_join(orbis_long, orbis_static, by = "firm_name")
View(orbis_long)
# DROP completely empty columns (no data for any years)
clean_orbis <- orbis_final %>%
select(where(~ !all(is.na(.)) & !all(. == "n.a.", na.rm = TRUE)))
# export long form orbis
date_str <- Sys.Date()
filename <- paste0("orbis_long_", date_str, ".csv")
write.csv(clean_orbis, filename, row.names = FALSE)
non_missing_percentage <- orbis_final %>%
summarise(across(everything(), ~ mean(!is.na(.)) * 100))
print(non_missing_percentage)
non_missing_sorted <- non_missing_percentage %>%
arrange(desc(Percent_Filled))
non_missing_df <- non_missing_percentage %>%
pivot_longer(cols = everything(), names_to = "Column", values_to = "Percent_Filled")
non_missing_sorted <- non_missing_percentage %>%
arrange(desc(Percent_Filled))
non_missing_df <- non_missing_percentage %>%
pivot_longer(cols = everything(), names_to = "Column", values_to = "Percent_Filled")
non_missing_sorted <- non_missing_df %>%
arrange(desc(Percent_Filled))
print(non_missing_df)
ggplot(non_missing_df, aes(x = reorder(Column, Percent_Filled), y = Percent_Filled)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +  # Flip for better readability
labs(
title = "Percentage of Non-Missing Data per Column",
x = "Column Name",
y = "Percentage of Filled Observations"
) +
theme_minimal()
ggplot(non_missing_df, aes(x = reorder(Column, Percent_Filled), y = Percent_Filled)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +  # Flip for better readability
labs(
title = "Percentage of Non-Missing Data per Column",
x = "Column Name",
y = "Percentage of Filled Observations"
) +
theme_minimal() +
theme(axis.text.y = element_text(size = 8))
ggplot(non_missing_df, aes(x = reorder(Column, Percent_Filled), y = Percent_Filled)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +  # Flip for better readability
labs(
title = "Percentage of Non-Missing Data per Column",
x = "Column Name",
y = "Percentage of Filled Observations"
) +
theme_minimal() +
theme(axis.text.y = element_text(size = 8))
ggplot(non_missing_df, aes(x = reorder(Column, Percent_Filled), y = Percent_Filled)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +  # Flip for better readability
labs(
title = "Percentage of Non-Missing Data per Column",
x = "Column Name",
y = "Percentage of Filled Observations"
) +
theme_minimal() +
theme(axis.text.y = element_text(size = 4))
View(non_missing_sorted)
